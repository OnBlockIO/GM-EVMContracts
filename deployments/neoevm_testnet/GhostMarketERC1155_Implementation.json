{
  "address": "0x31681e95A89034612926908F48A5E1Aa734EBf05",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BurnLazy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "BurnLazyBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "lockedContent",
          "type": "string"
        }
      ],
      "name": "LockedContentViewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GHOSTMARKET_NFT_ROYALTIES",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INTERFACE_ID_ERC1155_GHOSTMARKET",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentLockedContentViewTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLockedContent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltiesBps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltiesRecipients",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibPart.Part[]",
              "name": "royalties",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibERC1155LazyMint.Mint1155Data",
          "name": "lazyMintData",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lockedcontent",
          "type": "string"
        }
      ],
      "name": "mintGhost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibPart.Part[]",
              "name": "royalties",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibERC1155LazyMint.Mint1155Data",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFromOrMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6a4f3cab7e615b4462e70af411d54f460d61eb166bc0986af9e2eeb35845dc3",
  "receipt": {
    "to": null,
    "from": "0x07714A8BF073510996D948D8aA39f8E32627fe62",
    "contractAddress": "0x31681e95A89034612926908F48A5E1Aa734EBf05",
    "transactionIndex": 0,
    "gasUsed": "4511465",
    "logsBloom": "0x
    "blockHash": "0x8aae19248cd8606ca9635adafefa691696e806f83dc6209112b7f1ea829d3144",
    "transactionHash": "0xc6a4f3cab7e615b4462e70af411d54f460d61eb166bc0986af9e2eeb35845dc3",
    "logs": [],
    "blockNumber": 221797,
    "cumulativeGasUsed": "4511465",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6d64354e0faa8fc108c07c884a4d1fe7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnLazy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BurnLazyBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lockedContent\",\"type\":\"string\"}],\"name\":\"LockedContentViewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GHOSTMARKET_NFT_ROYALTIES\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INTERFACE_ID_ERC1155_GHOSTMARKET\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentLockedContentViewTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLockedContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltiesBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltiesRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibERC1155LazyMint.Mint1155Data\",\"name\":\"lazyMintData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lockedcontent\",\"type\":\"string\"}],\"name\":\"mintGhost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibERC1155LazyMint.Mint1155Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromOrMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BurnLazy(address,address,uint256,uint256)\":{\"params\":{\"account\":\"address used to burn\",\"amount\":\"amount of token burned\",\"id\":\"token id of token burned\",\"operator\":\"operator used to burn\"}},\"BurnLazyBatch(address,address,uint256[],uint256[])\":{\"params\":{\"account\":\"address used to burn\",\"amounts\":\"amounts of tokens burned\",\"ids\":\"token ids of tokens burned\",\"operator\":\"operator used to burn\"}},\"LockedContentViewed(address,uint256,string)\":{\"params\":{\"lockedContent\":\"locked content queried\",\"msgSender\":\"user that triggered it\",\"tokenId\":\"token id queried\"}},\"Minted(address,uint256,string,uint256)\":{\"params\":{\"amount\":\"amount of token minted\",\"toAddress\":\"recipient of the mint\",\"tokenId\":\"token id of the mint\",\"tokenURI\":\"token uri of the token minted\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"params\":{\"account\":\"account used to burn\",\"amount\":\"amount of tokens to burn\",\"id\":\"token to burn\"}},\"burnBatch(address,uint256[],uint256[])\":{\"params\":{\"account\":\"account used to burn\",\"amounts\":\"amounts of tokens to burn\",\"ids\":\"tokens to burn\"}},\"getCurrentCounter()\":{\"returns\":{\"_0\":\"current token conter\"}},\"getCurrentLockedContentViewTracker(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"locked content view count\"}},\"getLockedContent(uint256)\":{\"params\":{\"tokenId\":\"token to query\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoyalties(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token royalties details\"}},\"getRoyaltiesBps(uint256)\":{\"details\":\"fee basis points 10000 = 100%\",\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token royalties bps details\"}},\"getRoyaltiesRecipients(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token royalties recipients details\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,string,string)\":{\"params\":{\"_name\":\"contract name\",\"_symbol\":\"contract symbol\",\"uri\":\"contract uri\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mintAndTransfer((uint256,string,uint256,address,(address,uint256)[],bytes),address,uint256)\":{\"params\":{\"_amount\":\"amount of token(s)\",\"lazyMintData\":\"lazyMintData for token(s)\",\"to\":\"recipient for token(s)\"}},\"mintGhost(address,uint256,bytes,(address,uint256)[],string,string)\":{\"params\":{\"amount\":\"royalties for token(s)\",\"data\":\"royalties for token(s)\",\"lockedcontent\":\"lockedcontent for token(s)\",\"royalties\":\"royalties for token(s)\",\"to\":\"recipient for token(s)\",\"tokenURI\":\"tokenURI for token(s)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\",\"params\":{\"interfaceId\":\"interface id to query\"},\"returns\":{\"_0\":\"status interface id support status\"}},\"transferFromOrMint((uint256,string,uint256,address,(address,uint256)[],bytes),address,address,uint256)\":{\"params\":{\"amount\":\"amount of token\",\"data\":\"lazyMintData for token\",\"from\":\"source for token\",\"to\":\"recipient for token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"events\":{\"BurnLazy(address,address,uint256,uint256)\":{\"notice\":\"This event is emitted when a lazy minted token is burned\"},\"BurnLazyBatch(address,address,uint256[],uint256[])\":{\"notice\":\"This event is emitted when multiple lazy minted tokens are burned\"},\"LockedContentViewed(address,uint256,string)\":{\"notice\":\"This event is emitted when a token locked content is viewed\"},\"Minted(address,uint256,string,uint256)\":{\"notice\":\"This event is emitted when a token is minted\"}},\"kind\":\"user\",\"methods\":{\"_GHOSTMARKET_NFT_ROYALTIES()\":{\"notice\":\"bytes4(keccak256(_GHOSTMARKET_NFT_ROYALTIES)) == 0xe42093a6\"},\"burn(address,uint256,uint256)\":{\"notice\":\"Burn token\"},\"burnBatch(address,uint256[],uint256[])\":{\"notice\":\"Bulk burn tokens\"},\"getCurrentCounter()\":{\"notice\":\"Return current token counter\"},\"getCurrentLockedContentViewTracker(uint256)\":{\"notice\":\"Return locked content view count for a token\"},\"getLockedContent(uint256)\":{\"notice\":\"Trigger locked content event for a token\"},\"getRoyalties(uint256)\":{\"notice\":\"Return royalties for a token\"},\"getRoyaltiesBps(uint256)\":{\"notice\":\"Return royalties bps for a token\"},\"getRoyaltiesRecipients(uint256)\":{\"notice\":\"Return royalties recipients for a token\"},\"initialize(string,string,string)\":{\"notice\":\"Initialize the contract\"},\"mintAndTransfer((uint256,string,uint256,address,(address,uint256)[],bytes),address,uint256)\":{\"notice\":\"Lazy mint token\"},\"mintGhost(address,uint256,bytes,(address,uint256)[],string,string)\":{\"notice\":\"Mint token(s)\"},\"name()\":{\"notice\":\"contract name\"},\"supportsInterface(bytes4)\":{\"notice\":\"Return interface support for an interface id\"},\"symbol()\":{\"notice\":\"contract symbol\"},\"transferFromOrMint((uint256,string,uint256,address,(address,uint256)[],bytes),address,address,uint256)\":{\"notice\":\"Transfer (if exists) or mint (if non existing) token(s)\"}},\"notice\":\"GhostMarket ERC1155 contract with minting, burning, pause, royalties & lock content functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mint/GhostMarketERC1155.sol\":\"GhostMarketERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165StorageUpgradeable is Initializable, ERC165Upgradeable {\\n    function __ERC165Storage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165Storage_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8abf30b22b9f34c48c1101400a3172483cfa4fdc5e4de6d040309463e6faee4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8defa7c9cc7cc4eb529daff535eff833f76a4cb424f85a08524eeea15e071a55\",\"license\":\"MIT\"},\"src/mint/ERC1155PresetMinterPauserUpgradeableCustom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"./extensions/ERC1155PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC1155} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC1155PresetMinterPauserUpgradeableCustom is\\n    Initializable,\\n    ContextUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    ERC1155BurnableUpgradeable,\\n    ERC1155PausableUpgradeable\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\\n     * deploys the contract.\\n     */\\n    function __ERC1155PresetMinterPauser_init(string memory uri) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n        __ERC1155_init_unchained(uri);\\n        __ERC1155Burnable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC1155Pausable_init_unchained();\\n        __ERC1155PresetMinterPauser_init_unchained();\\n    }\\n\\n    function __ERC1155PresetMinterPauser_init_unchained() internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function setURI(string memory uri_) external {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"ERC1155PresetMinterPauser: must have admin role to set new uri\\\"\\n        );\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\\n     */\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\");\\n\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerableUpgradeable, ERC1155Upgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Upgradeable, ERC1155PausableUpgradeable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x95117efdd20a20459d3a3729d9f23fd3f7fca757205eaf137b3b2708543e03c6\",\"license\":\"MIT\"},\"src/mint/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/IERC1155Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC1155Upgradeable,\\n    IERC1155MetadataURIUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    // custom\\n    // Mapping from token ID to supply\\n    mapping(uint => uint) private supply;\\n    // custom\\n    // Mapping from token ID to minted\\n    mapping(uint => uint) private minted;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        // custom\\n        if (minted[id] > 0 && supply[id] > 0) {\\n            uint newMinted = amount + minted[id];\\n            require(newMinted <= supply[id], \\\"more than supply\\\");\\n            minted[id] = newMinted;\\n        } else {\\n            minted[id] = amount;\\n        }\\n\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        // custom - removed and handled in GhostMarketERC1155.sol\\n        // emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; ++i) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    // custom\\n    /**\\n     * @dev lazy burn a NFT, set minted\\n     */\\n    function _burnLazy(uint256 id, uint256 amount) internal returns (uint256 leftToBurn, uint256 lazyToBurn) {\\n        leftToBurn = amount;\\n        lazyToBurn = 0;\\n        address creator = address(uint160(id >> 96));\\n        if (creator == _msgSender()) {\\n            lazyToBurn = amount;\\n            if (supply[id] != 0) {\\n                //calculate Lazy amount available for burn\\n                uint256 lazyBalance = supply[id] - minted[id];\\n                if (amount > lazyBalance) {\\n                    //need to burn more than available\\n                    lazyToBurn = lazyBalance;\\n                }\\n            }\\n            minted[id] += amount;\\n            leftToBurn = amount - lazyToBurn;\\n        }\\n    }\\n\\n    // custom\\n    /**\\n     * @dev save supply of a NFT\\n     */\\n    function _saveSupply(uint tokenId, uint _supply) internal {\\n        if (supply[tokenId] == 0) {\\n            supply[tokenId] = _supply;\\n        }\\n        // emit Supply(tokenId, _supply);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xcc7309cab2e704928a4efaeaf679f054f20ccee4dea833ff0a4242a5f3b77b96\",\"license\":\"MIT\"},\"src/mint/ERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract ERC1271 {\\n    bytes4 public constant ERC1271_INTERFACE_ID = 0xfb855dc9;\\n\\n    bytes4 public constant ERC1271_RETURN_VALID_SIGNATURE = 0x1626ba7e;\\n    bytes4 public constant ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\\n\\n    /**\\n     * @dev Function must be implemented by deriving contract\\n     * @param _hash Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     * @return A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not\\n     *\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0x6d3078ac1ee38f4731f92369dc9c497c01e1340cdd17a9a59197f18d80629312\",\"license\":\"MIT\"},\"src/mint/ERC1271Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nabstract contract ERC1271Validator is EIP712Upgradeable {\\n    using AddressUpgradeable for address;\\n    using ECDSAUpgradeable for bytes32;\\n\\n    string private constant SIGNATURE_ERROR = \\\"signature verification error\\\";\\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\\n\\n    function validate1271(address signer, bytes32 structHash, bytes memory signature) internal view {\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signerFromSig;\\n        if (signature.length == 65) {\\n            signerFromSig = hash.recover(signature);\\n        }\\n        if (signerFromSig != signer) {\\n            if (signer.isContract()) {\\n                require(ERC1271(signer).isValidSignature(hash, signature) == MAGICVALUE, SIGNATURE_ERROR);\\n            } else {\\n                revert(SIGNATURE_ERROR);\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbfff154f92d0d7ca83fe958f394af4bba1fdacd28af734a7ae917ceb25f4500e\",\"license\":\"MIT\"},\"src/mint/GhostMarketERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ERC1155PresetMinterPauserUpgradeableCustom.sol\\\";\\nimport \\\"./Mint1155Validator.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\\\";\\n\\n/// @notice GhostMarket ERC1155 contract with minting, burning, pause, royalties & lock content functions.\\ncontract GhostMarketERC1155 is\\n    Initializable,\\n    ERC1155PresetMinterPauserUpgradeableCustom,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC165StorageUpgradeable,\\n    Mint1155Validator\\n{\\n    /// @notice contract name\\n    string public name;\\n    /// @notice contract symbol\\n    string public symbol;\\n\\n    // dev @deprecated\\n    struct Royalty {\\n        address payable recipient;\\n        uint256 value;\\n    }\\n\\n    /// @notice tokenId to royalties mapping\\n    mapping(uint256 => LibPart.Part[]) internal _royalties;\\n\\n    /// @notice tokenId to locked content mapping\\n    mapping(uint256 => string) internal _lockedContent;\\n\\n    /// @notice tokenId to locked content view counter mapping\\n    mapping(uint256 => uint256) internal _lockedContentViewTracker;\\n\\n    // @dev deprecated\\n    mapping(uint256 => string) internal _metadataJson;\\n\\n    // events\\n    /// @notice This event is emitted when a token locked content is viewed\\n    /// @param msgSender user that triggered it\\n    /// @param tokenId token id queried\\n    /// @param lockedContent locked content queried\\n    event LockedContentViewed(address indexed msgSender, uint256 indexed tokenId, string lockedContent);\\n\\n    /// @notice This event is emitted when a token is minted\\n    /// @param toAddress recipient of the mint\\n    /// @param tokenId token id of the mint\\n    /// @param tokenURI token uri of the token minted\\n    /// @param amount amount of token minted\\n    event Minted(address indexed toAddress, uint256 indexed tokenId, string tokenURI, uint256 amount);\\n\\n    /// @notice This event is emitted when a lazy minted token is burned\\n    /// @param operator operator used to burn\\n    /// @param account address used to burn\\n    /// @param id token id of token burned\\n    /// @param amount amount of token burned\\n    event BurnLazy(address indexed operator, address indexed account, uint256 id, uint256 amount);\\n\\n    /// @notice This event is emitted when multiple lazy minted tokens are burned\\n    /// @param operator operator used to burn\\n    /// @param account address used to burn\\n    /// @param ids token ids of tokens burned\\n    /// @param amounts amounts of tokens burned\\n    event BurnLazyBatch(address indexed operator, address indexed account, uint256[] ids, uint256[] amounts);\\n\\n    // @dev deprecated\\n    uint256 internal _payedMintFeesBalance;\\n\\n    // @dev deprecated\\n    uint256 internal _ghostmarketMintFees;\\n\\n    // @dev deprecated\\n    bytes4 public constant _INTERFACE_ID_ERC1155_GHOSTMARKET = bytes4(keccak256(\\\"_INTERFACE_ID_ERC1155_GHOSTMARKET\\\"));\\n\\n    /**\\n     * bytes4(keccak256(_GHOSTMARKET_NFT_ROYALTIES)) == 0xe42093a6\\n     */\\n    bytes4 public constant _GHOSTMARKET_NFT_ROYALTIES = bytes4(keccak256(\\\"_GHOSTMARKET_NFT_ROYALTIES\\\"));\\n\\n    /// @notice Initialize the contract\\n    /// @param _name contract name\\n    /// @param _symbol contract symbol\\n    /// @param uri contract uri\\n    function initialize(string memory _name, string memory _symbol, string memory uri) public virtual initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n        __ERC1155_init_unchained(uri);\\n        __ERC1155Burnable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC1155Pausable_init_unchained();\\n        __ERC1155PresetMinterPauser_init_unchained();\\n        __Ownable_init_unchained();\\n        _registerInterface(_GHOSTMARKET_NFT_ROYALTIES);\\n        name = _name;\\n        symbol = _symbol;\\n        _tokenIdTracker.increment();\\n        __Mint1155Validator_init_unchained();\\n    }\\n\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    // _tokenIdTracker to generate automated token IDs\\n    CountersUpgradeable.Counter private _tokenIdTracker;\\n\\n    /// @notice Return interface support for an interface id\\n    /// @dev See {IERC165-supportsInterface}.\\n    /// @param interfaceId interface id to query\\n    /// @return status interface id support status\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(ERC1155PresetMinterPauserUpgradeableCustom, ERC165StorageUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Return if msg.sender is owner of token id\\n    /// @return owner status of token id\\n    function _ownerOf(uint256 tokenId) internal view returns (bool) {\\n        return balanceOf(msg.sender, tokenId) != 0;\\n    }\\n\\n    /// @notice Set a token royalties\\n    /// @dev fee basis points 10000 = 100%\\n    /// @param tokenId token to set\\n    /// @param royalties royalties to set\\n    function _saveRoyalties(uint256 tokenId, LibPart.Part[] memory royalties) internal {\\n        uint256 totalValue;\\n        uint length = royalties.length;\\n        for (uint256 i; i < length; ++i) {\\n            require(royalties[i].recipient != address(0x0), \\\"Recipient should be present\\\");\\n            require(royalties[i].value > 0, \\\"Royalties value should be positive\\\");\\n            totalValue += royalties[i].value;\\n            _royalties[tokenId].push(royalties[i]);\\n        }\\n        require(totalValue <= 5000, \\\"Royalty total value should be < 50%\\\");\\n    }\\n\\n    /// @notice Set a token locked content\\n    /// @param tokenId token to set\\n    function _setLockedContent(uint256 tokenId, string memory content) internal {\\n        require(bytes(content).length < 200, \\\"Lock content bytes length should be < 200\\\");\\n        _lockedContent[tokenId] = content;\\n    }\\n\\n    /// @notice Increment a token locked content view count\\n    /// @param tokenId token to set\\n    function _incrementCurrentLockedContentViewTracker(uint256 tokenId) internal {\\n        _lockedContentViewTracker[tokenId] = _lockedContentViewTracker[tokenId] + 1;\\n    }\\n\\n    /// @notice Transfer (if exists) or mint (if non existing) token(s)\\n    /// @param data lazyMintData for token\\n    /// @param from source for token\\n    /// @param to recipient for token\\n    /// @param amount amount of token\\n    function transferFromOrMint(\\n        LibERC1155LazyMint.Mint1155Data memory data,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        uint balance = balanceOf(from, data.tokenId);\\n        uint left = amount;\\n        if (balance != 0) {\\n            uint transfer = amount;\\n            if (balance < amount) {\\n                transfer = balance;\\n            }\\n            safeTransferFrom(from, to, data.tokenId, transfer, \\\"\\\");\\n            left = amount - transfer;\\n        }\\n        if (left > 0) {\\n            require(from == data.minter, \\\"wrong order maker\\\");\\n            mintAndTransfer(data, to, left);\\n        }\\n    }\\n\\n    /// @notice Lazy mint token\\n    /// @param lazyMintData lazyMintData for token(s)\\n    /// @param to recipient for token(s)\\n    /// @param _amount amount of token(s)\\n    function mintAndTransfer(\\n        LibERC1155LazyMint.Mint1155Data memory lazyMintData,\\n        address to,\\n        uint256 _amount\\n    ) public virtual {\\n        require(\\n            keccak256(abi.encodePacked(lazyMintData.tokenURI)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"tokenURI can't be empty\\\"\\n        );\\n        address minter = address(uint160(lazyMintData.tokenId >> 96));\\n        address sender = _msgSender();\\n        require(minter == sender || isApprovedForAll(minter, sender), \\\"ERC1155: transfer caller is not approved\\\");\\n        require(_amount > 0, \\\"amount incorrect\\\");\\n\\n        if (lazyMintData.minter != _msgSender()) {\\n            validate(lazyMintData.minter, LibERC1155LazyMint.hash(lazyMintData), lazyMintData.signature);\\n        }\\n        if (lazyMintData.royalties.length > 0) {\\n            _saveRoyalties(lazyMintData.tokenId, lazyMintData.royalties);\\n        }\\n        _saveSupply(lazyMintData.tokenId, lazyMintData.amount);\\n\\n        mint(to, lazyMintData.tokenId, _amount, \\\"\\\");\\n\\n        if (minter != to) {\\n            emit TransferSingle(sender, address(0), minter, lazyMintData.tokenId, _amount);\\n            emit TransferSingle(sender, minter, to, lazyMintData.tokenId, _amount);\\n        } else {\\n            emit TransferSingle(sender, address(0), to, lazyMintData.tokenId, _amount);\\n        }\\n        emit Minted(to, lazyMintData.tokenId, lazyMintData.tokenURI, _amount);\\n    }\\n\\n    /// @notice Mint token(s)\\n    /// @param to recipient for token(s)\\n    /// @param amount royalties for token(s)\\n    /// @param data royalties for token(s)\\n    /// @param royalties royalties for token(s)\\n    /// @param tokenURI tokenURI for token(s)\\n    /// @param lockedcontent lockedcontent for token(s)\\n    function mintGhost(\\n        address to,\\n        uint256 amount,\\n        bytes memory data,\\n        LibPart.Part[] memory royalties,\\n        string memory tokenURI,\\n        string memory lockedcontent\\n    ) external payable nonReentrant {\\n        require(to != address(0x0), \\\"to can't be empty\\\");\\n        require(keccak256(abi.encodePacked(tokenURI)) != keccak256(abi.encodePacked(\\\"\\\")), \\\"tokenURI can't be empty\\\");\\n        mint(to, _tokenIdTracker.current(), amount, data);\\n        if (royalties.length > 0) {\\n            _saveRoyalties(_tokenIdTracker.current(), royalties);\\n        }\\n        if (keccak256(abi.encodePacked(lockedcontent)) != keccak256(abi.encodePacked(\\\"\\\"))) {\\n            _setLockedContent(_tokenIdTracker.current(), lockedcontent);\\n        }\\n        emit TransferSingle(_msgSender(), address(0), to, _tokenIdTracker.current(), amount);\\n        emit Minted(to, _tokenIdTracker.current(), tokenURI, amount);\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /// @notice Bulk burn tokens\\n    /// @param account account used to burn\\n    /// @param ids tokens to burn\\n    /// @param amounts amounts of tokens to burn\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) public virtual override {\\n        require(ids.length == amounts.length, \\\"ids != amounts\\\");\\n        uint256[] memory leftToBurns = new uint256[](ids.length);\\n        uint256[] memory lazyToBurns = new uint256[](ids.length);\\n        for (uint i = 0; i < ids.length; ++i) {\\n            (leftToBurns[i], lazyToBurns[i]) = ERC1155Upgradeable._burnLazy(ids[i], amounts[i]);\\n        }\\n        ERC1155BurnableUpgradeable.burnBatch(account, ids, leftToBurns);\\n        emit BurnLazyBatch(_msgSender(), account, ids, lazyToBurns);\\n    }\\n\\n    /// @notice Burn token\\n    /// @param account account used to burn\\n    /// @param id token to burn\\n    /// @param amount amount of tokens to burn\\n    function burn(address account, uint256 id, uint256 amount) public virtual override {\\n        (uint256 leftToBurn, uint256 lazyToBurn) = ERC1155Upgradeable._burnLazy(id, amount);\\n        if (leftToBurn > 0) {\\n            ERC1155BurnableUpgradeable.burn(account, id, leftToBurn);\\n        }\\n        if (lazyToBurn > 0) {\\n            emit BurnLazy(_msgSender(), account, id, lazyToBurn);\\n        }\\n    }\\n\\n    /// @notice Trigger locked content event for a token\\n    /// @param tokenId token to query\\n    function getLockedContent(uint256 tokenId) external {\\n        require(_ownerOf(tokenId), \\\"Caller must be the owner of the token\\\");\\n        _incrementCurrentLockedContentViewTracker(tokenId);\\n        emit LockedContentViewed(msg.sender, tokenId, _lockedContent[tokenId]);\\n    }\\n\\n    /// @notice Return locked content view count for a token\\n    /// @param tokenId token to query\\n    /// @return locked content view count\\n    function getCurrentLockedContentViewTracker(uint256 tokenId) external view returns (uint256) {\\n        return _lockedContentViewTracker[tokenId];\\n    }\\n\\n    /// @notice Return royalties for a token\\n    /// @param tokenId token to query\\n    /// @return token royalties details\\n    function getRoyalties(uint256 tokenId) external view returns (LibPart.Part[] memory) {\\n        return _royalties[tokenId];\\n    }\\n\\n    /// @notice Return royalties recipients for a token\\n    /// @param tokenId token to query\\n    /// @return token royalties recipients details\\n    function getRoyaltiesRecipients(uint256 tokenId) external view returns (address payable[] memory) {\\n        LibPart.Part[] memory royalties = _royalties[tokenId];\\n        address payable[] memory result = new address payable[](royalties.length);\\n        uint length = royalties.length;\\n        for (uint256 i; i < length; ++i) {\\n            result[i] = royalties[i].recipient;\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Return royalties bps for a token\\n    /// @dev fee basis points 10000 = 100%\\n    /// @param tokenId token to query\\n    /// @return token royalties bps details\\n    function getRoyaltiesBps(uint256 tokenId) external view returns (uint256[] memory) {\\n        LibPart.Part[] memory royalties = _royalties[tokenId];\\n        uint256[] memory result = new uint256[](royalties.length);\\n        uint length = royalties.length;\\n        for (uint256 i; i < length; ++i) {\\n            result[i] = royalties[i].value;\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Return current token counter\\n    /// @return current token conter\\n    function getCurrentCounter() external view returns (uint256) {\\n        return _tokenIdTracker.current();\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc52aba9b1d234100b152ea45658a92bd20ffbf2ba5392aed273637b97742a8c2\",\"license\":\"MIT\"},\"src/mint/Mint1155Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ERC1271Validator.sol\\\";\\nimport \\\"./librairies/LibERC1155LazyMint.sol\\\";\\n\\ncontract Mint1155Validator is ERC1271Validator {\\n    function __Mint1155Validator_init_unchained() internal {\\n        __EIP712_init_unchained(\\\"Mint1155\\\", \\\"1\\\");\\n    }\\n\\n    function validate(address account, bytes32 hash, bytes memory signature) internal view {\\n        validate1271(account, hash, signature);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x48fe689d0cb4c60ae2c12e32ffadc9e23c9cf5baef75fa69c1978ec837bc6147\",\"license\":\"MIT\"},\"src/mint/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155Burnable_init_unchained();\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal initializer {}\\n\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x546ed86b4fff391bbc5095b4a796599cf14f6140447b44ccc618bf06c933660e\",\"license\":\"MIT\"},\"src/mint/extensions/ERC1155PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155PausableUpgradeable is Initializable, ERC1155Upgradeable, PausableUpgradeable {\\n    function __ERC1155Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC1155Pausable_init_unchained();\\n    }\\n\\n    function __ERC1155Pausable_init_unchained() internal initializer {}\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xae4f3f918e91bc7343b965ef68033c00643f1f58242a0f25d8d3b93807037877\",\"license\":\"MIT\"},\"src/mint/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x35662765c204a85772c198378a6b52e014da6bdd48a369a06c0e5bda6f7b5633\",\"license\":\"MIT\"},\"src/mint/extensions/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x04e676e81dbfc95c5c8f443da52df0a047802f488cd2236ce16c80e13e1a99ef\",\"license\":\"MIT\"},\"src/mint/interfaces/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4aa51f1a57510d6d1a718ebe20d57f943bc1f06febb0e1d7a4b8389f91ce755a\",\"license\":\"MIT\"},\"src/mint/librairies/LibERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 public constant ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n\\n    struct Mint1155Data {\\n        uint tokenId;\\n        string tokenURI;\\n        uint amount;\\n        address minter;\\n        LibPart.Part[] royalties;\\n        bytes signature;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\\n        keccak256(\\n            \\\"Mint1155(uint256 tokenId,string tokenURI,uint256 amount,address minter,Part[] royalties)Part(address recipient,uint256 value)\\\"\\n        );\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MINT_AND_TRANSFER_TYPEHASH,\\n                    data.tokenId,\\n                    keccak256(bytes(data.tokenURI)),\\n                    data.amount,\\n                    data.minter,\\n                    keccak256(abi.encodePacked(royaltiesBytes))\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1c2ff91a3c50a63680cbdd0ba7cc60ff2d6c155baf49f914b0eaebfb38e9f3c7\",\"license\":\"MIT\"},\"src/mint/librairies/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address recipient,uint256 value)\\\");\\n\\n    struct Part {\\n        address payable recipient;\\n        uint256 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.recipient, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0x2977fecf210d2c560ecb87ec6e52470c30e471fecd6f96ae6bfc0135040ea88b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061509e806100206000396000f3fe6080604052600436106102455760003560e01c80638da5cb5b11610139578063c1793c58116100b6578063e63ab1e91161007a578063e63ab1e91461071b578063e985e9c51461073d578063edcbc0bd1461075d578063f242432a1461078a578063f2fde38b146107aa578063f5298aca146107ca57600080fd5b8063c1793c5814610659578063c6f4f0f014610679578063ca15c873146106a7578063d5391393146106c7578063d547741f146106fb57600080fd5b8063a22cb465116100fd578063a22cb46514610598578063a6487c53146105b8578063ab866db1146105d8578063b3175cae1461060c578063bb3bafd61461062c57600080fd5b80638da5cb5b146104fb5780639010d07c1461052e57806391d148541461054e57806395d89b411461056e578063a217fddf1461058357600080fd5b80632f2ff15d116101c75780635c975abb1161018b5780635c975abb146104835780636b20c4541461049c578063715018a6146104bc57806373448c46146104d15780638456cb59146104e657600080fd5b80632f2ff15d146103e157806336568abe146104015780633f4ba83a1461042157806342ef1cb0146104365780634e1273f41461045657600080fd5b80630e89341c1161020e5780630e89341c1461030457806315e5022e146103245780631c7e78f314610371578063248a9ca3146103915780632eb2c2d6146103c157600080fd5b8062fdd58e1461024a57806301ffc9a71461027d57806302fe5305146102ad57806306fdde03146102cf5780630a0e1e83146102f1575b600080fd5b34801561025657600080fd5b5061026a610265366004613e85565b6107ea565b6040519081526020015b60405180910390f35b34801561028957600080fd5b5061029d610298366004613ec7565b610886565b6040519015158152602001610274565b3480156102b957600080fd5b506102cd6102c8366004613fe6565b610891565b005b3480156102db57600080fd5b506102e4610908565b604051610274919061407a565b6102cd6102ff366004614151565b610997565b34801561031057600080fd5b506102e461031f366004614216565b610bb6565b34801561033057600080fd5b506103587f94407210afedd72cdb4464e227401c7df8809575d2576d9f50e0d5cba8a92e5581565b6040516001600160e01b03199091168152602001610274565b34801561037d57600080fd5b506102cd61038c366004614216565b610c4a565b34801561039d57600080fd5b5061026a6103ac366004614216565b60009081526065602052604090206001015490565b3480156103cd57600080fd5b506102cd6103dc3660046142a0565b610d03565b3480156103ed57600080fd5b506102cd6103fc36600461434d565b610f7e565b34801561040d57600080fd5b506102cd61041c36600461434d565b610fa8565b34801561042d57600080fd5b506102cd611026565b34801561044257600080fd5b506102cd610451366004614435565b6110a8565b34801561046257600080fd5b5061047661047136600461449e565b611165565b60405161027491906145a5565b34801561048f57600080fd5b5061012f5460ff1661029d565b3480156104a857600080fd5b506102cd6104b73660046145b8565b61128e565b3480156104c857600080fd5b506102cd611450565b3480156104dd57600080fd5b5061026a611462565b3480156104f257600080fd5b506102cd611473565b34801561050757600080fd5b506101f7546001600160a01b03165b6040516001600160a01b039091168152602001610274565b34801561053a57600080fd5b5061051661054936600461462d565b6114ef565b34801561055a57600080fd5b5061029d61056936600461434d565b61150e565b34801561057a57600080fd5b506102e4611539565b34801561058f57600080fd5b5061026a600081565b3480156105a457600080fd5b506102cd6105b336600461464f565b611547565b3480156105c457600080fd5b506102cd6105d3366004614682565b61161e565b3480156105e457600080fd5b506103587fe42093a63818e0c931c15fda9036d0d8995a638e7acfabc8355a4789766e8de981565b34801561061857600080fd5b506102cd6106273660046146ff565b611793565b34801561063857600080fd5b5061064c610647366004614216565b611a4e565b6040516102749190614758565b34801561066557600080fd5b50610476610674366004614216565b611ad7565b34801561068557600080fd5b5061026a610694366004614216565b60009081526102f7602052604090205490565b3480156106b357600080fd5b5061026a6106c2366004614216565b611bfb565b3480156106d357600080fd5b5061026a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561070757600080fd5b506102cd61071636600461434d565b611c12565b34801561072757600080fd5b5061026a60008051602061504983398151915281565b34801561074957600080fd5b5061029d6107583660046147b0565b611c37565b34801561076957600080fd5b5061077d610778366004614216565b611c65565b60405161027491906147de565b34801561079657600080fd5b506102cd6107a536600461482b565b611d8c565b3480156107b657600080fd5b506102cd6107c5366004614893565b611eeb565b3480156107d657600080fd5b506102cd6107e53660046148b0565b611f61565b60006001600160a01b03831661085b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b50600081815260c9602090815260408083206001600160a01b03861684529091529020545b92915050565b600061088082611fd4565b61089c60003361150e565b6108fc5760405162461bcd60e51b815260206004820152603e6024820152600080516020614fe983398151915260448201527f686176652061646d696e20726f6c6520746f20736574206e65772075726900006064820152608401610852565b61090581612006565b50565b6102f38054610916906148e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610942906148e5565b801561098f5780601f106109645761010080835404028352916020019161098f565b820191906000526020600020905b81548152906001019060200180831161097257829003601f168201915b505050505081565b60026101c55414156109eb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610852565b60026101c5556001600160a01b038616610a3b5760405162461bcd60e51b8152602060048201526011602482015270746f2063616e277420626520656d70747960781b6044820152606401610852565b6040805160008152602081018083528151902091610a5b91859101614920565b604051602081830303815290604052805190602001201415610a8f5760405162461bcd60e51b81526004016108529061493c565b610aa486610a9d6102fb5490565b8787612019565b825115610abe57610abe610ab86102fb5490565b84612025565b6040805160008152602081018083528151902091610ade91849101614920565b6040516020818303038152906040528051906020012014610b0c57610b0c610b066102fb5490565b82612235565b6001600160a01b0386166000336001600160a01b0316600080516020615009833981519152610b3b6102fb5490565b60408051918252602082018b90520160405180910390a46102fb54866001600160a01b03167ff5c82eda717141c5f0cfeb894e7b7819c158a337b62ec13d412aecad30b0ad9e8488604051610b9192919061496d565b60405180910390a3610ba86102fb80546001019055565b505060016101c55550505050565b606060cb8054610bc5906148e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf1906148e5565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b50505050509050919050565b610c53816122b8565b610cad5760405162461bcd60e51b815260206004820152602560248201527f43616c6c6572206d75737420626520746865206f776e6572206f6620746865206044820152643a37b5b2b760d91b6064820152608401610852565b610cb6816122cc565b60008181526102f66020526040908190209051829133917f544b1d1249133c50ce89743ed1ca34a815bd50d42b71e6d331a1ac560013a8ec91610cf89161498f565b60405180910390a350565b8151835114610d245760405162461bcd60e51b815260040161085290614a37565b6001600160a01b038416610d4a5760405162461bcd60e51b815260040161085290614a7f565b6001600160a01b038516331480610d665750610d668533611c37565b610dcd5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610852565b33610ddc8187878787876122fa565b60005b8451811015610f10576000858281518110610dfc57610dfc614ac4565b602002602001015190506000858381518110610e1a57610e1a614ac4565b602090810291909101810151600084815260c9835260408082206001600160a01b038e168352909352919091205490915081811015610e6b5760405162461bcd60e51b815260040161085290614ada565b610e758282614b3a565b60c9600085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160c9600085815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ef59190614b51565b9250508190555050505080610f0990614b69565b9050610ddf565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f60929190614b84565b60405180910390a4610f76818787878787612308565b505050505050565b600082815260656020526040902060010154610f998161247a565b610fa38383612484565b505050565b6001600160a01b03811633146110185760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610852565b61102282826124a6565b5050565b61103e6000805160206150498339815191523361150e565b61109e5760405162461bcd60e51b815260206004820152603b6024820152600080516020614fe983398151915260448201527f686176652070617573657220726f6c6520746f20756e706175736500000000006064820152608401610852565b6110a66124c8565b565b60006110b88486600001516107ea565b90508181156110fb5782808310156110cd5750815b6110ed868689600001518460405180602001604052806000815250611d8c565b6110f78185614b3a565b9150505b8015610f765785606001516001600160a01b0316856001600160a01b03161461115a5760405162461bcd60e51b81526020600482015260116024820152703bb937b7339037b93232b91036b0b5b2b960791b6044820152606401610852565b610f76868583611793565b606081518351146111ca5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610852565b600083516001600160401b038111156111e5576111e5613ee4565b60405190808252806020026020018201604052801561120e578160200160208202803683370190505b50905060005b84518110156112865761125985828151811061123257611232614ac4565b602002602001015185838151811061124c5761124c614ac4565b60200260200101516107ea565b82828151811061126b5761126b614ac4565b602090810291909101015261127f81614b69565b9050611214565b509392505050565b80518251146112d05760405162461bcd60e51b815260206004820152600e60248201526d69647320213d20616d6f756e747360901b6044820152606401610852565b600082516001600160401b038111156112eb576112eb613ee4565b604051908082528060200260200182016040528015611314578160200160208202803683370190505b509050600083516001600160401b0381111561133257611332613ee4565b60405190808252806020026020018201604052801561135b578160200160208202803683370190505b50905060005b84518110156113f0576113a685828151811061137f5761137f614ac4565b602002602001015185838151811061139957611399614ac4565b602002602001015161251b565b8483815181106113b8576113b8614ac4565b602002602001018484815181106113d1576113d1614ac4565b6020908102919091010191909152526113e981614b69565b9050611361565b506113fc8585846125af565b6001600160a01b038516336001600160a01b03167fcf3391513e21a9d4a0348f8e890080170eba18dc62db35b60d8a518b7088eb3a8684604051611441929190614b84565b60405180910390a35050505050565b6114586125f2565b6110a6600061264d565b600061146e6102fb5490565b905090565b61148b6000805160206150498339815191523361150e565b6114e75760405162461bcd60e51b81526020600482015260396024820152600080516020614fe9833981519152604482015278686176652070617573657220726f6c6520746f20706175736560381b6064820152608401610852565b6110a66126a0565b600082815260976020526040812061150790836126de565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102f48054610916906148e5565b336001600160a01b03831614156115b25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610852565b33600081815260ca602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600054610100900460ff161580801561163e5750600054600160ff909116105b8061165f575061164d306126ea565b15801561165f575060005460ff166001145b61167b5760405162461bcd60e51b815260040161085290614bb2565b6000805460ff19166001179055801561169e576000805461ff0019166101001790555b6116a66126f9565b6116ae6126f9565b6116b66126f9565b6116be6126f9565b6116c782612720565b6116cf6127e0565b6116d7612896565b6116df6127e0565b6116e76128ca565b6116ef612997565b6117187fe42093a63818e0c931c15fda9036d0d8995a638e7acfabc8355a4789766e8de96129c7565b835161172c906102f3906020870190613dc7565b508251611741906102f4906020860190613dc7565b506117516102fb80546001019055565b611759612a47565b801561178d576000805461ff0019169055604051600181526000805160206150298339815191529060200160405180910390a15b50505050565b60408051600081526020808201808452825190209086015190926117b79201614920565b6040516020818303038152906040528051906020012014156117eb5760405162461bcd60e51b81526004016108529061493c565b825160601c338082148061180457506118048282611c37565b6118615760405162461bcd60e51b815260206004820152602860248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f7420604482015267185c1c1c9bdd995960c21b6064820152608401610852565b600083116118a45760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081a5b98dbdc9c9958dd60821b6044820152606401610852565b60608501516001600160a01b031633146118d3576118d385606001516118c987612a8a565b8760a00151612bf0565b608085015151156118f0576118f085600001518660800151612025565b61190285600001518660400151612bfb565b6119218486600001518560405180602001604052806000815250612019565b836001600160a01b0316826001600160a01b0316146119cd57845160408051918252602082018590526001600160a01b038085169260009291851691600080516020615009833981519152910160405180910390a4836001600160a01b0316826001600160a01b0316826001600160a01b03166000805160206150098339815191528860000151876040516119c0929190918252602082015260400190565b60405180910390a4611a0a565b845160408051918252602082018590526001600160a01b038087169260009291851691600080516020615009833981519152910160405180910390a45b8460000151846001600160a01b03167ff5c82eda717141c5f0cfeb894e7b7819c158a337b62ec13d412aecad30b0ad9e87602001518660405161144192919061496d565b60606102f56000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611acc576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611a84565b505050509050919050565b60008181526102f560209081526040808320805482518185028101850190935280835260609493849084015b82821015611b4b576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611b03565b505050509050600081516001600160401b03811115611b6c57611b6c613ee4565b604051908082528060200260200182016040528015611b95578160200160208202803683370190505b50825190915060005b81811015611bf157838181518110611bb857611bb8614ac4565b602002602001015160200151838281518110611bd657611bd6614ac4565b6020908102919091010152611bea81614b69565b9050611b9e565b5090949350505050565b600081815260976020526040812061088090612c20565b600082815260656020526040902060010154611c2d8161247a565b610fa383836124a6565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b60008181526102f560209081526040808320805482518185028101850190935280835260609493849084015b82821015611cd9576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611c91565b505050509050600081516001600160401b03811115611cfa57611cfa613ee4565b604051908082528060200260200182016040528015611d23578160200160208202803683370190505b50825190915060005b81811015611bf157838181518110611d4657611d46614ac4565b602002602001015160000151838281518110611d6457611d64614ac4565b6001600160a01b0390921660209283029190910190910152611d8581614b69565b9050611d2c565b6001600160a01b038416611db25760405162461bcd60e51b815260040161085290614a7f565b6001600160a01b038516331480611dce5750611dce8533611c37565b611dea5760405162461bcd60e51b815260040161085290614c00565b33611e09818787611dfa88612c2a565b611e0388612c2a565b876122fa565b600084815260c9602090815260408083206001600160a01b038a16845290915290205483811015611e4c5760405162461bcd60e51b815260040161085290614ada565b611e568482614b3a565b600086815260c9602090815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290611e94908490614b51565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020615009833981519152910160405180910390a4611ee2828888888888612c75565b50505050505050565b611ef36125f2565b6001600160a01b038116611f585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610852565b6109058161264d565b600080611f6e848461251b565b90925090508115611f8457611f84858584612d46565b8015611fcd5760408051858152602081018390526001600160a01b0387169133917f5110a21391aa55386de41fe7a3e3dffb40132d38d629a113a7f4afff251b1a019101611441565b5050505050565b6000611fdf82612d89565b806108805750506001600160e01b0319166000908152610229602052604090205460ff1690565b80516110229060cb906020840190613dc7565b61178d84848484612d94565b8051600090815b818110156121d65760006001600160a01b031684828151811061205157612051614ac4565b6020026020010151600001516001600160a01b031614156120b45760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610852565b60008482815181106120c8576120c8614ac4565b6020026020010151602001511161212c5760405162461bcd60e51b815260206004820152602260248201527f526f79616c746965732076616c75652073686f756c6420626520706f73697469604482015261766560f01b6064820152608401610852565b83818151811061213e5761213e614ac4565b602002602001015160200151836121559190614b51565b92506102f5600086815260200190815260200160002084828151811061217d5761217d614ac4565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b039092169190911781559101519101556121cf81614b69565b905061202c565b5061138882111561178d5760405162461bcd60e51b815260206004820152602360248201527f526f79616c747920746f74616c2076616c75652073686f756c64206265203c2060448201526235302560e81b6064820152608401610852565b60c88151106122985760405162461bcd60e51b815260206004820152602960248201527f4c6f636b20636f6e74656e74206279746573206c656e6774682073686f756c646044820152680206265203c203230360bc1b6064820152608401610852565b60008281526102f6602090815260409091208251610fa392840190613dc7565b60006122c433836107ea565b151592915050565b60008181526102f760205260409020546122e7906001614b51565b60009182526102f7602052604090912055565b610f76868686868686612f0e565b61231a846001600160a01b03166126ea565b15610f765760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906123539089908990889088908890600401614c49565b602060405180830381600087803b15801561236d57600080fd5b505af192505050801561239d575060408051601f3d908101601f1916820190925261239a91810190614ca7565b60015b61244a576123a9614cc4565b806308c379a014156123e357506123be614ce0565b806123c957506123e5565b8060405162461bcd60e51b8152600401610852919061407a565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610852565b6001600160e01b0319811663bc197c8160e01b14611ee25760405162461bcd60e51b815260040161085290614d69565b6109058133612f77565b61248e8282612fdb565b6000828152609760205260409020610fa39082613061565b6124b08282613076565b6000828152609760205260409020610fa390826130dd565b6124d06130f2565b61012f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b806000606084901c338114156125a757600085815260cc60205260409020548492501561257657600085815260cd602090815260408083205460cc9092528220546125669190614b3a565b905080851115612574578092505b505b600085815260cd602052604081208054869290612594908490614b51565b909155506125a490508285614b3a565b92505b509250929050565b6001600160a01b0383163314806125cb57506125cb8333611c37565b6125e75760405162461bcd60e51b815260040161085290614c00565b610fa383838361313c565b6101f7546001600160a01b031633146110a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610852565b6101f780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6126a86132d8565b61012f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124fe3390565b6000611507838361331f565b6001600160a01b03163b151590565b600054610100900460ff166110a65760405162461bcd60e51b815260040161085290614db1565b600054610100900460ff16158080156127405750600054600160ff909116105b80612761575061274f306126ea565b158015612761575060005460ff166001145b61277d5760405162461bcd60e51b815260040161085290614bb2565b6000805460ff1916600117905580156127a0576000805461ff0019166101001790555b6127a982612006565b8015611022576000805461ff0019169055604051600181526000805160206150298339815191529060200160405180910390a15050565b600054610100900460ff16158080156128005750600054600160ff909116105b80612821575061280f306126ea565b158015612821575060005460ff166001145b61283d5760405162461bcd60e51b815260040161085290614bb2565b6000805460ff191660011790558015612860576000805461ff0019166101001790555b8015610905576000805461ff0019169055604051600181526000805160206150298339815191529060200160405180910390a150565b600054610100900460ff166128bd5760405162461bcd60e51b815260040161085290614db1565b61012f805460ff19169055565b600054610100900460ff16158080156128ea5750600054600160ff909116105b8061290b57506128f9306126ea565b15801561290b575060005460ff166001145b6129275760405162461bcd60e51b815260040161085290614bb2565b6000805460ff19166001179055801561294a576000805461ff0019166101001790555b612955600033613349565b61297f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633613349565b61286060008051602061504983398151915233613349565b600054610100900460ff166129be5760405162461bcd60e51b815260040161085290614db1565b6110a63361264d565b6001600160e01b03198082161415612a215760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401610852565b6001600160e01b031916600090815261022960205260409020805460ff19166001179055565b6110a6604051806040016040528060088152602001674d696e743131353560c01b815250604051806040016040528060018152602001603160f81b815250613353565b6000808260800151516001600160401b03811115612aaa57612aaa613ee4565b604051908082528060200260200182016040528015612ad3578160200160208202803683370190505b50905060005b836080015151811015612b3957612b0c84608001518281518110612aff57612aff614ac4565b6020026020010151613396565b828281518110612b1e57612b1e614ac4565b6020908102919091010152612b3281614b69565b9050612ad9565b507f3dcb471ba61bca9d3a21935bf6759f5945f7febe391420b6accadc1d1e882e0c83600001518460200151805190602001208560400151866060015185604051602001612b879190614dfc565b60408051601f19818403018152828252805160209182012090830197909752810194909452606084019290925260808301526001600160a01b031660a082015260c081019190915260e00160405160208183030381529060405280519060200120915050919050565b610fa3838383613409565b600082815260cc602052604090205461102257600091825260cc602052604090912055565b6000610880825490565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612c6457612c64614ac4565b602090810291909101015292915050565b612c87846001600160a01b03166126ea565b15610f765760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612cc09089908990889088908890600401614e32565b602060405180830381600087803b158015612cda57600080fd5b505af1925050508015612d0a575060408051601f3d908101601f19168201909252612d0791810190614ca7565b60015b612d16576123a9614cc4565b6001600160e01b0319811663f23a6e6160e01b14611ee25760405162461bcd60e51b815260040161085290614d69565b6001600160a01b038316331480612d625750612d628333611c37565b612d7e5760405162461bcd60e51b815260040161085290614c00565b610fa383838361358f565b60006108808261368a565b600083815260cd602052604090205415801590612dbe5750600083815260cc602052604090205415155b15612e4457600083815260cd6020526040812054612ddc9084614b51565b600085815260cc6020526040902054909150811115612e305760405162461bcd60e51b815260206004820152601060248201526f6d6f7265207468616e20737570706c7960801b6044820152606401610852565b600084815260cd6020526040902055612e56565b600083815260cd602052604090208290555b6001600160a01b038416612eb65760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610852565b33612ec781600087611dfa88612c2a565b600084815260c9602090815260408083206001600160a01b038916845290915281208054859290612ef9908490614b51565b90915550611fcd905081600087878787612c75565b61012f5460ff1615610f765760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b6064820152608401610852565b612f81828261150e565b61102257612f99816001600160a01b031660146136ca565b612fa48360206136ca565b604051602001612fb5929190614e77565b60408051601f198184030181529082905262461bcd60e51b82526108529160040161407a565b612fe5828261150e565b6110225760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561301d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611507836001600160a01b038416613865565b613080828261150e565b156110225760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611507836001600160a01b0384166138b4565b61012f5460ff166110a65760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610852565b6001600160a01b0383166131625760405162461bcd60e51b815260040161085290614ee6565b80518251146131835760405162461bcd60e51b815260040161085290614a37565b60003390506131a6818560008686604051806020016040528060008152506122fa565b60005b83518110156132795760008482815181106131c6576131c6614ac4565b6020026020010151905060008483815181106131e4576131e4614ac4565b602090810291909101810151600084815260c9835260408082206001600160a01b038c1683529093529190912054909150818110156132355760405162461bcd60e51b815260040161085290614f29565b61323f8282614b3a565b600093845260c9602090815260408086206001600160a01b038c1687529091529093209290925550613272905081614b69565b90506131a9565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516132ca929190614b84565b60405180910390a450505050565b61012f5460ff16156110a65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610852565b600082600001828154811061333657613336614ac4565b9060005260206000200154905092915050565b6110228282612484565b600054610100900460ff1661337a5760405162461bcd60e51b815260040161085290614db1565b81516020928301208151919092012061025b9190915561025c55565b80516020808301516040516000936133ec937fce8c43412600341b06881c0113c6a93eb2fdd51da73426cee150319daf4e1909939192019283526001600160a01b03919091166020830152604082015260600190565b604051602081830303815290604052805190602001209050919050565b6000613414836139a7565b9050600082516041141561342f5761342c82846139f5565b90505b846001600160a01b0316816001600160a01b031614611fcd5761345a856001600160a01b03166126ea565b1561354457604051630b135d3f60e11b808252906001600160a01b03871690631626ba7e9061348f9086908890600401614f6d565b60206040518083038186803b1580156134a757600080fd5b505afa1580156134bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134df9190614ca7565b6001600160e01b031916146040518060400160405280601c81526020017f7369676e617475726520766572696669636174696f6e206572726f72000000008152509061353e5760405162461bcd60e51b8152600401610852919061407a565b50611fcd565b604080518082018252601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020820152905162461bcd60e51b8152610852919060040161407a565b6001600160a01b0383166135b55760405162461bcd60e51b815260040161085290614ee6565b336135e4818560006135c687612c2a565b6135cf87612c2a565b604051806020016040528060008152506122fa565b600083815260c9602090815260408083206001600160a01b0388168452909152902054828110156136275760405162461bcd60e51b815260040161085290614f29565b6136318382614b3a565b600085815260c9602090815260408083206001600160a01b038a81168086529184528285209590955581518981529283018890529293861691600080516020615009833981519152910160405180910390a45050505050565b60006001600160e01b03198216636cdb3d1360e11b14806136bb57506001600160e01b031982166303a24d0760e21b145b80610880575061088082613a11565b606060006136d9836002614f86565b6136e4906002614b51565b6001600160401b038111156136fb576136fb613ee4565b6040519080825280601f01601f191660200182016040528015613725576020820181803683370190505b509050600360fc1b8160008151811061374057613740614ac4565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061376f5761376f614ac4565b60200101906001600160f81b031916908160001a9053506000613793846002614f86565b61379e906001614b51565b90505b6001811115613816576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106137d2576137d2614ac4565b1a60f81b8282815181106137e8576137e8614ac4565b60200101906001600160f81b031916908160001a90535060049490941c9361380f81614fa5565b90506137a1565b5083156115075760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610852565b60008181526001830160205260408120546138ac57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610880565b506000610880565b6000818152600183016020526040812054801561399d5760006138d8600183614b3a565b85549091506000906138ec90600190614b3a565b905081811461395157600086600001828154811061390c5761390c614ac4565b906000526020600020015490508087600001848154811061392f5761392f614ac4565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061396257613962614fbc565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610880565b6000915050610880565b60006108806139b4613a36565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000613a048585613ab3565b9150915061128681613af9565b60006001600160e01b03198216635a05180f60e01b1480610880575061088082613caf565b600061146e7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613a6661025b5490565b61025c546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b600080825160411415613aea5760208301516040840151606085015160001a613ade87828585613ce4565b94509450505050613af2565b506000905060025b9250929050565b6000816004811115613b0d57613b0d614fd2565b1415613b165750565b6001816004811115613b2a57613b2a614fd2565b1415613b735760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610852565b6002816004811115613b8757613b87614fd2565b1415613bd55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610852565b6003816004811115613be957613be9614fd2565b1415613c425760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610852565b6004816004811115613c5657613c56614fd2565b14156109055760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610852565b60006001600160e01b03198216637965db0b60e01b148061088057506301ffc9a760e01b6001600160e01b0319831614610880565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115613d115750600090506003613dbe565b8460ff16601b14158015613d2957508460ff16601c14155b15613d3a5750600090506004613dbe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613d8e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613db757600060019250925050613dbe565b9150600090505b94509492505050565b828054613dd3906148e5565b90600052602060002090601f016020900481019282613df55760008555613e3b565b82601f10613e0e57805160ff1916838001178555613e3b565b82800160010185558215613e3b579182015b82811115613e3b578251825591602001919060010190613e20565b50613e47929150613e4b565b5090565b5b80821115613e475760008155600101613e4c565b6001600160a01b038116811461090557600080fd5b8035613e8081613e60565b919050565b60008060408385031215613e9857600080fd5b8235613ea381613e60565b946020939093013593505050565b6001600160e01b03198116811461090557600080fd5b600060208284031215613ed957600080fd5b813561150781613eb1565b634e487b7160e01b600052604160045260246000fd5b604081018181106001600160401b0382111715613f1957613f19613ee4565b60405250565b601f8201601f191681016001600160401b0381118282101715613f4457613f44613ee4565b6040525050565b60405160c081016001600160401b0381118282101715613f6d57613f6d613ee4565b60405290565b600082601f830112613f8457600080fd5b81356001600160401b03811115613f9d57613f9d613ee4565b604051613fb4601f8301601f191660200182613f1f565b818152846020838601011115613fc957600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613ff857600080fd5b81356001600160401b0381111561400e57600080fd5b61401a84828501613f73565b949350505050565b60005b8381101561403d578181015183820152602001614025565b8381111561178d5750506000910152565b60008151808452614066816020860160208601614022565b601f01601f19169290920160200192915050565b602081526000611507602083018461404e565b60006001600160401b038211156140a6576140a6613ee4565b5060051b60200190565b600082601f8301126140c157600080fd5b813560206140ce8261408d565b604080516140dc8382613f1f565b84815260069490941b86018301938381019250878511156140fc57600080fd5b8387015b858110156141455782818a0312156141185760008081fd5b825161412381613efa565b813561412e81613e60565b815281860135868201528452928401928201614100565b50979650505050505050565b60008060008060008060c0878903121561416a57600080fd5b61417387613e75565b95506020870135945060408701356001600160401b038082111561419657600080fd5b6141a28a838b01613f73565b955060608901359150808211156141b857600080fd5b6141c48a838b016140b0565b945060808901359150808211156141da57600080fd5b6141e68a838b01613f73565b935060a08901359150808211156141fc57600080fd5b5061420989828a01613f73565b9150509295509295509295565b60006020828403121561422857600080fd5b5035919050565b600082601f83011261424057600080fd5b8135602061424d8261408d565b60405161425a8282613f1f565b83815260059390931b850182019282810191508684111561427a57600080fd5b8286015b84811015614295578035835291830191830161427e565b509695505050505050565b600080600080600060a086880312156142b857600080fd5b85356142c381613e60565b945060208601356142d381613e60565b935060408601356001600160401b03808211156142ef57600080fd5b6142fb89838a0161422f565b9450606088013591508082111561431157600080fd5b61431d89838a0161422f565b9350608088013591508082111561433357600080fd5b5061434088828901613f73565b9150509295509295909350565b6000806040838503121561436057600080fd5b82359150602083013561437281613e60565b809150509250929050565b600060c0828403121561438f57600080fd5b614397613f4b565b90508135815260208201356001600160401b03808211156143b757600080fd5b6143c385838601613f73565b6020840152604084013560408401526143de60608501613e75565b606084015260808401359150808211156143f757600080fd5b614403858386016140b0565b608084015260a084013591508082111561441c57600080fd5b5061442984828501613f73565b60a08301525092915050565b6000806000806080858703121561444b57600080fd5b84356001600160401b0381111561446157600080fd5b61446d8782880161437d565b945050602085013561447e81613e60565b9250604085013561448e81613e60565b9396929550929360600135925050565b600080604083850312156144b157600080fd5b82356001600160401b03808211156144c857600080fd5b818501915085601f8301126144dc57600080fd5b813560206144e98261408d565b6040516144f68282613f1f565b83815260059390931b850182019282810191508984111561451657600080fd5b948201945b8386101561453d57853561452e81613e60565b8252948201949082019061451b565b9650508601359250508082111561455357600080fd5b506145608582860161422f565b9150509250929050565b600081518084526020808501945080840160005b8381101561459a5781518752958201959082019060010161457e565b509495945050505050565b602081526000611507602083018461456a565b6000806000606084860312156145cd57600080fd5b83356145d881613e60565b925060208401356001600160401b03808211156145f457600080fd5b6146008783880161422f565b9350604086013591508082111561461657600080fd5b506146238682870161422f565b9150509250925092565b6000806040838503121561464057600080fd5b50508035926020909101359150565b6000806040838503121561466257600080fd5b823561466d81613e60565b91506020830135801515811461437257600080fd5b60008060006060848603121561469757600080fd5b83356001600160401b03808211156146ae57600080fd5b6146ba87838801613f73565b945060208601359150808211156146d057600080fd5b6146dc87838801613f73565b935060408601359150808211156146f257600080fd5b5061462386828701613f73565b60008060006060848603121561471457600080fd5b83356001600160401b0381111561472a57600080fd5b6147368682870161437d565b935050602084013561474781613e60565b929592945050506040919091013590565b602080825282518282018190526000919060409081850190868401855b828110156147a357815180516001600160a01b03168552860151868501529284019290850190600101614775565b5091979650505050505050565b600080604083850312156147c357600080fd5b82356147ce81613e60565b9150602083013561437281613e60565b6020808252825182820181905260009190848201906040850190845b8181101561481f5783516001600160a01b0316835292840192918401916001016147fa565b50909695505050505050565b600080600080600060a0868803121561484357600080fd5b853561484e81613e60565b9450602086013561485e81613e60565b9350604086013592506060860135915060808601356001600160401b0381111561488757600080fd5b61434088828901613f73565b6000602082840312156148a557600080fd5b813561150781613e60565b6000806000606084860312156148c557600080fd5b83356148d081613e60565b95602085013595506040909401359392505050565b600181811c908216806148f957607f821691505b6020821081141561491a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251614932818460208701614022565b9190910192915050565b602080825260179082015276746f6b656e5552492063616e277420626520656d70747960481b604082015260600190565b604081526000614980604083018561404e565b90508260208301529392505050565b600060208083526000845481600182811c9150808316806149b157607f831692505b8583108114156149cf57634e487b7160e01b85526022600452602485fd5b8786018381526020018180156149ec57600181146149fd57614a28565b60ff19861682528782019650614a28565b60008b81526020902060005b86811015614a2257815484820152908501908901614a09565b83019750505b50949998505050505050505050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015614b4c57614b4c614b24565b500390565b60008219821115614b6457614b64614b24565b500190565b6000600019821415614b7d57614b7d614b24565b5060010190565b604081526000614b97604083018561456a565b8281036020840152614ba9818561456a565b95945050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090614c759083018661456a565b8281036060840152614c87818661456a565b90508281036080840152614c9b818561404e565b98975050505050505050565b600060208284031215614cb957600080fd5b815161150781613eb1565b600060033d1115614cdd5760046000803e5060005160e01c5b90565b600060443d1015614cee5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715614d1d57505050505090565b8285019150815181811115614d355750505050505090565b843d8701016020828501011115614d4f5750505050505090565b614d5e60208286010187613f1f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b815160009082906020808601845b83811015614e2657815185529382019390820190600101614e0a565b50929695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614e6c9083018461404e565b979650505050505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351614ea9816017850160208801614022565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614eda816028840160208801614022565b01602801949350505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b82815260406020820152600061401a604083018461404e565b6000816000190483118215151615614fa057614fa0614b24565b500290565b600081614fb457614fb4614b24565b506000190190565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fdfe455243313135355072657365744d696e7465725061757365723a206d75737420c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f627f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa264697066735822122000d87c8dbf1a567a1710cdd4e639bc01851bce317117421bea6251444ae2ae7b64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102455760003560e01c80638da5cb5b11610139578063c1793c58116100b6578063e63ab1e91161007a578063e63ab1e91461071b578063e985e9c51461073d578063edcbc0bd1461075d578063f242432a1461078a578063f2fde38b146107aa578063f5298aca146107ca57600080fd5b8063c1793c5814610659578063c6f4f0f014610679578063ca15c873146106a7578063d5391393146106c7578063d547741f146106fb57600080fd5b8063a22cb465116100fd578063a22cb46514610598578063a6487c53146105b8578063ab866db1146105d8578063b3175cae1461060c578063bb3bafd61461062c57600080fd5b80638da5cb5b146104fb5780639010d07c1461052e57806391d148541461054e57806395d89b411461056e578063a217fddf1461058357600080fd5b80632f2ff15d116101c75780635c975abb1161018b5780635c975abb146104835780636b20c4541461049c578063715018a6146104bc57806373448c46146104d15780638456cb59146104e657600080fd5b80632f2ff15d146103e157806336568abe146104015780633f4ba83a1461042157806342ef1cb0146104365780634e1273f41461045657600080fd5b80630e89341c1161020e5780630e89341c1461030457806315e5022e146103245780631c7e78f314610371578063248a9ca3146103915780632eb2c2d6146103c157600080fd5b8062fdd58e1461024a57806301ffc9a71461027d57806302fe5305146102ad57806306fdde03146102cf5780630a0e1e83146102f1575b600080fd5b34801561025657600080fd5b5061026a610265366004613e85565b6107ea565b6040519081526020015b60405180910390f35b34801561028957600080fd5b5061029d610298366004613ec7565b610886565b6040519015158152602001610274565b3480156102b957600080fd5b506102cd6102c8366004613fe6565b610891565b005b3480156102db57600080fd5b506102e4610908565b604051610274919061407a565b6102cd6102ff366004614151565b610997565b34801561031057600080fd5b506102e461031f366004614216565b610bb6565b34801561033057600080fd5b506103587f94407210afedd72cdb4464e227401c7df8809575d2576d9f50e0d5cba8a92e5581565b6040516001600160e01b03199091168152602001610274565b34801561037d57600080fd5b506102cd61038c366004614216565b610c4a565b34801561039d57600080fd5b5061026a6103ac366004614216565b60009081526065602052604090206001015490565b3480156103cd57600080fd5b506102cd6103dc3660046142a0565b610d03565b3480156103ed57600080fd5b506102cd6103fc36600461434d565b610f7e565b34801561040d57600080fd5b506102cd61041c36600461434d565b610fa8565b34801561042d57600080fd5b506102cd611026565b34801561044257600080fd5b506102cd610451366004614435565b6110a8565b34801561046257600080fd5b5061047661047136600461449e565b611165565b60405161027491906145a5565b34801561048f57600080fd5b5061012f5460ff1661029d565b3480156104a857600080fd5b506102cd6104b73660046145b8565b61128e565b3480156104c857600080fd5b506102cd611450565b3480156104dd57600080fd5b5061026a611462565b3480156104f257600080fd5b506102cd611473565b34801561050757600080fd5b506101f7546001600160a01b03165b6040516001600160a01b039091168152602001610274565b34801561053a57600080fd5b5061051661054936600461462d565b6114ef565b34801561055a57600080fd5b5061029d61056936600461434d565b61150e565b34801561057a57600080fd5b506102e4611539565b34801561058f57600080fd5b5061026a600081565b3480156105a457600080fd5b506102cd6105b336600461464f565b611547565b3480156105c457600080fd5b506102cd6105d3366004614682565b61161e565b3480156105e457600080fd5b506103587fe42093a63818e0c931c15fda9036d0d8995a638e7acfabc8355a4789766e8de981565b34801561061857600080fd5b506102cd6106273660046146ff565b611793565b34801561063857600080fd5b5061064c610647366004614216565b611a4e565b6040516102749190614758565b34801561066557600080fd5b50610476610674366004614216565b611ad7565b34801561068557600080fd5b5061026a610694366004614216565b60009081526102f7602052604090205490565b3480156106b357600080fd5b5061026a6106c2366004614216565b611bfb565b3480156106d357600080fd5b5061026a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561070757600080fd5b506102cd61071636600461434d565b611c12565b34801561072757600080fd5b5061026a60008051602061504983398151915281565b34801561074957600080fd5b5061029d6107583660046147b0565b611c37565b34801561076957600080fd5b5061077d610778366004614216565b611c65565b60405161027491906147de565b34801561079657600080fd5b506102cd6107a536600461482b565b611d8c565b3480156107b657600080fd5b506102cd6107c5366004614893565b611eeb565b3480156107d657600080fd5b506102cd6107e53660046148b0565b611f61565b60006001600160a01b03831661085b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b50600081815260c9602090815260408083206001600160a01b03861684529091529020545b92915050565b600061088082611fd4565b61089c60003361150e565b6108fc5760405162461bcd60e51b815260206004820152603e6024820152600080516020614fe983398151915260448201527f686176652061646d696e20726f6c6520746f20736574206e65772075726900006064820152608401610852565b61090581612006565b50565b6102f38054610916906148e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610942906148e5565b801561098f5780601f106109645761010080835404028352916020019161098f565b820191906000526020600020905b81548152906001019060200180831161097257829003601f168201915b505050505081565b60026101c55414156109eb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610852565b60026101c5556001600160a01b038616610a3b5760405162461bcd60e51b8152602060048201526011602482015270746f2063616e277420626520656d70747960781b6044820152606401610852565b6040805160008152602081018083528151902091610a5b91859101614920565b604051602081830303815290604052805190602001201415610a8f5760405162461bcd60e51b81526004016108529061493c565b610aa486610a9d6102fb5490565b8787612019565b825115610abe57610abe610ab86102fb5490565b84612025565b6040805160008152602081018083528151902091610ade91849101614920565b6040516020818303038152906040528051906020012014610b0c57610b0c610b066102fb5490565b82612235565b6001600160a01b0386166000336001600160a01b0316600080516020615009833981519152610b3b6102fb5490565b60408051918252602082018b90520160405180910390a46102fb54866001600160a01b03167ff5c82eda717141c5f0cfeb894e7b7819c158a337b62ec13d412aecad30b0ad9e8488604051610b9192919061496d565b60405180910390a3610ba86102fb80546001019055565b505060016101c55550505050565b606060cb8054610bc5906148e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf1906148e5565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b50505050509050919050565b610c53816122b8565b610cad5760405162461bcd60e51b815260206004820152602560248201527f43616c6c6572206d75737420626520746865206f776e6572206f6620746865206044820152643a37b5b2b760d91b6064820152608401610852565b610cb6816122cc565b60008181526102f66020526040908190209051829133917f544b1d1249133c50ce89743ed1ca34a815bd50d42b71e6d331a1ac560013a8ec91610cf89161498f565b60405180910390a350565b8151835114610d245760405162461bcd60e51b815260040161085290614a37565b6001600160a01b038416610d4a5760405162461bcd60e51b815260040161085290614a7f565b6001600160a01b038516331480610d665750610d668533611c37565b610dcd5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610852565b33610ddc8187878787876122fa565b60005b8451811015610f10576000858281518110610dfc57610dfc614ac4565b602002602001015190506000858381518110610e1a57610e1a614ac4565b602090810291909101810151600084815260c9835260408082206001600160a01b038e168352909352919091205490915081811015610e6b5760405162461bcd60e51b815260040161085290614ada565b610e758282614b3a565b60c9600085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160c9600085815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ef59190614b51565b9250508190555050505080610f0990614b69565b9050610ddf565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f60929190614b84565b60405180910390a4610f76818787878787612308565b505050505050565b600082815260656020526040902060010154610f998161247a565b610fa38383612484565b505050565b6001600160a01b03811633146110185760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610852565b61102282826124a6565b5050565b61103e6000805160206150498339815191523361150e565b61109e5760405162461bcd60e51b815260206004820152603b6024820152600080516020614fe983398151915260448201527f686176652070617573657220726f6c6520746f20756e706175736500000000006064820152608401610852565b6110a66124c8565b565b60006110b88486600001516107ea565b90508181156110fb5782808310156110cd5750815b6110ed868689600001518460405180602001604052806000815250611d8c565b6110f78185614b3a565b9150505b8015610f765785606001516001600160a01b0316856001600160a01b03161461115a5760405162461bcd60e51b81526020600482015260116024820152703bb937b7339037b93232b91036b0b5b2b960791b6044820152606401610852565b610f76868583611793565b606081518351146111ca5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610852565b600083516001600160401b038111156111e5576111e5613ee4565b60405190808252806020026020018201604052801561120e578160200160208202803683370190505b50905060005b84518110156112865761125985828151811061123257611232614ac4565b602002602001015185838151811061124c5761124c614ac4565b60200260200101516107ea565b82828151811061126b5761126b614ac4565b602090810291909101015261127f81614b69565b9050611214565b509392505050565b80518251146112d05760405162461bcd60e51b815260206004820152600e60248201526d69647320213d20616d6f756e747360901b6044820152606401610852565b600082516001600160401b038111156112eb576112eb613ee4565b604051908082528060200260200182016040528015611314578160200160208202803683370190505b509050600083516001600160401b0381111561133257611332613ee4565b60405190808252806020026020018201604052801561135b578160200160208202803683370190505b50905060005b84518110156113f0576113a685828151811061137f5761137f614ac4565b602002602001015185838151811061139957611399614ac4565b602002602001015161251b565b8483815181106113b8576113b8614ac4565b602002602001018484815181106113d1576113d1614ac4565b6020908102919091010191909152526113e981614b69565b9050611361565b506113fc8585846125af565b6001600160a01b038516336001600160a01b03167fcf3391513e21a9d4a0348f8e890080170eba18dc62db35b60d8a518b7088eb3a8684604051611441929190614b84565b60405180910390a35050505050565b6114586125f2565b6110a6600061264d565b600061146e6102fb5490565b905090565b61148b6000805160206150498339815191523361150e565b6114e75760405162461bcd60e51b81526020600482015260396024820152600080516020614fe9833981519152604482015278686176652070617573657220726f6c6520746f20706175736560381b6064820152608401610852565b6110a66126a0565b600082815260976020526040812061150790836126de565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102f48054610916906148e5565b336001600160a01b03831614156115b25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610852565b33600081815260ca602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600054610100900460ff161580801561163e5750600054600160ff909116105b8061165f575061164d306126ea565b15801561165f575060005460ff166001145b61167b5760405162461bcd60e51b815260040161085290614bb2565b6000805460ff19166001179055801561169e576000805461ff0019166101001790555b6116a66126f9565b6116ae6126f9565b6116b66126f9565b6116be6126f9565b6116c782612720565b6116cf6127e0565b6116d7612896565b6116df6127e0565b6116e76128ca565b6116ef612997565b6117187fe42093a63818e0c931c15fda9036d0d8995a638e7acfabc8355a4789766e8de96129c7565b835161172c906102f3906020870190613dc7565b508251611741906102f4906020860190613dc7565b506117516102fb80546001019055565b611759612a47565b801561178d576000805461ff0019169055604051600181526000805160206150298339815191529060200160405180910390a15b50505050565b60408051600081526020808201808452825190209086015190926117b79201614920565b6040516020818303038152906040528051906020012014156117eb5760405162461bcd60e51b81526004016108529061493c565b825160601c338082148061180457506118048282611c37565b6118615760405162461bcd60e51b815260206004820152602860248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f7420604482015267185c1c1c9bdd995960c21b6064820152608401610852565b600083116118a45760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081a5b98dbdc9c9958dd60821b6044820152606401610852565b60608501516001600160a01b031633146118d3576118d385606001516118c987612a8a565b8760a00151612bf0565b608085015151156118f0576118f085600001518660800151612025565b61190285600001518660400151612bfb565b6119218486600001518560405180602001604052806000815250612019565b836001600160a01b0316826001600160a01b0316146119cd57845160408051918252602082018590526001600160a01b038085169260009291851691600080516020615009833981519152910160405180910390a4836001600160a01b0316826001600160a01b0316826001600160a01b03166000805160206150098339815191528860000151876040516119c0929190918252602082015260400190565b60405180910390a4611a0a565b845160408051918252602082018590526001600160a01b038087169260009291851691600080516020615009833981519152910160405180910390a45b8460000151846001600160a01b03167ff5c82eda717141c5f0cfeb894e7b7819c158a337b62ec13d412aecad30b0ad9e87602001518660405161144192919061496d565b60606102f56000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611acc576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611a84565b505050509050919050565b60008181526102f560209081526040808320805482518185028101850190935280835260609493849084015b82821015611b4b576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611b03565b505050509050600081516001600160401b03811115611b6c57611b6c613ee4565b604051908082528060200260200182016040528015611b95578160200160208202803683370190505b50825190915060005b81811015611bf157838181518110611bb857611bb8614ac4565b602002602001015160200151838281518110611bd657611bd6614ac4565b6020908102919091010152611bea81614b69565b9050611b9e565b5090949350505050565b600081815260976020526040812061088090612c20565b600082815260656020526040902060010154611c2d8161247a565b610fa383836124a6565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b60008181526102f560209081526040808320805482518185028101850190935280835260609493849084015b82821015611cd9576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611c91565b505050509050600081516001600160401b03811115611cfa57611cfa613ee4565b604051908082528060200260200182016040528015611d23578160200160208202803683370190505b50825190915060005b81811015611bf157838181518110611d4657611d46614ac4565b602002602001015160000151838281518110611d6457611d64614ac4565b6001600160a01b0390921660209283029190910190910152611d8581614b69565b9050611d2c565b6001600160a01b038416611db25760405162461bcd60e51b815260040161085290614a7f565b6001600160a01b038516331480611dce5750611dce8533611c37565b611dea5760405162461bcd60e51b815260040161085290614c00565b33611e09818787611dfa88612c2a565b611e0388612c2a565b876122fa565b600084815260c9602090815260408083206001600160a01b038a16845290915290205483811015611e4c5760405162461bcd60e51b815260040161085290614ada565b611e568482614b3a565b600086815260c9602090815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290611e94908490614b51565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020615009833981519152910160405180910390a4611ee2828888888888612c75565b50505050505050565b611ef36125f2565b6001600160a01b038116611f585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610852565b6109058161264d565b600080611f6e848461251b565b90925090508115611f8457611f84858584612d46565b8015611fcd5760408051858152602081018390526001600160a01b0387169133917f5110a21391aa55386de41fe7a3e3dffb40132d38d629a113a7f4afff251b1a019101611441565b5050505050565b6000611fdf82612d89565b806108805750506001600160e01b0319166000908152610229602052604090205460ff1690565b80516110229060cb906020840190613dc7565b61178d84848484612d94565b8051600090815b818110156121d65760006001600160a01b031684828151811061205157612051614ac4565b6020026020010151600001516001600160a01b031614156120b45760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610852565b60008482815181106120c8576120c8614ac4565b6020026020010151602001511161212c5760405162461bcd60e51b815260206004820152602260248201527f526f79616c746965732076616c75652073686f756c6420626520706f73697469604482015261766560f01b6064820152608401610852565b83818151811061213e5761213e614ac4565b602002602001015160200151836121559190614b51565b92506102f5600086815260200190815260200160002084828151811061217d5761217d614ac4565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b039092169190911781559101519101556121cf81614b69565b905061202c565b5061138882111561178d5760405162461bcd60e51b815260206004820152602360248201527f526f79616c747920746f74616c2076616c75652073686f756c64206265203c2060448201526235302560e81b6064820152608401610852565b60c88151106122985760405162461bcd60e51b815260206004820152602960248201527f4c6f636b20636f6e74656e74206279746573206c656e6774682073686f756c646044820152680206265203c203230360bc1b6064820152608401610852565b60008281526102f6602090815260409091208251610fa392840190613dc7565b60006122c433836107ea565b151592915050565b60008181526102f760205260409020546122e7906001614b51565b60009182526102f7602052604090912055565b610f76868686868686612f0e565b61231a846001600160a01b03166126ea565b15610f765760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906123539089908990889088908890600401614c49565b602060405180830381600087803b15801561236d57600080fd5b505af192505050801561239d575060408051601f3d908101601f1916820190925261239a91810190614ca7565b60015b61244a576123a9614cc4565b806308c379a014156123e357506123be614ce0565b806123c957506123e5565b8060405162461bcd60e51b8152600401610852919061407a565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610852565b6001600160e01b0319811663bc197c8160e01b14611ee25760405162461bcd60e51b815260040161085290614d69565b6109058133612f77565b61248e8282612fdb565b6000828152609760205260409020610fa39082613061565b6124b08282613076565b6000828152609760205260409020610fa390826130dd565b6124d06130f2565b61012f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b806000606084901c338114156125a757600085815260cc60205260409020548492501561257657600085815260cd602090815260408083205460cc9092528220546125669190614b3a565b905080851115612574578092505b505b600085815260cd602052604081208054869290612594908490614b51565b909155506125a490508285614b3a565b92505b509250929050565b6001600160a01b0383163314806125cb57506125cb8333611c37565b6125e75760405162461bcd60e51b815260040161085290614c00565b610fa383838361313c565b6101f7546001600160a01b031633146110a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610852565b6101f780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6126a86132d8565b61012f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124fe3390565b6000611507838361331f565b6001600160a01b03163b151590565b600054610100900460ff166110a65760405162461bcd60e51b815260040161085290614db1565b600054610100900460ff16158080156127405750600054600160ff909116105b80612761575061274f306126ea565b158015612761575060005460ff166001145b61277d5760405162461bcd60e51b815260040161085290614bb2565b6000805460ff1916600117905580156127a0576000805461ff0019166101001790555b6127a982612006565b8015611022576000805461ff0019169055604051600181526000805160206150298339815191529060200160405180910390a15050565b600054610100900460ff16158080156128005750600054600160ff909116105b80612821575061280f306126ea565b158015612821575060005460ff166001145b61283d5760405162461bcd60e51b815260040161085290614bb2565b6000805460ff191660011790558015612860576000805461ff0019166101001790555b8015610905576000805461ff0019169055604051600181526000805160206150298339815191529060200160405180910390a150565b600054610100900460ff166128bd5760405162461bcd60e51b815260040161085290614db1565b61012f805460ff19169055565b600054610100900460ff16158080156128ea5750600054600160ff909116105b8061290b57506128f9306126ea565b15801561290b575060005460ff166001145b6129275760405162461bcd60e51b815260040161085290614bb2565b6000805460ff19166001179055801561294a576000805461ff0019166101001790555b612955600033613349565b61297f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633613349565b61286060008051602061504983398151915233613349565b600054610100900460ff166129be5760405162461bcd60e51b815260040161085290614db1565b6110a63361264d565b6001600160e01b03198082161415612a215760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401610852565b6001600160e01b031916600090815261022960205260409020805460ff19166001179055565b6110a6604051806040016040528060088152602001674d696e743131353560c01b815250604051806040016040528060018152602001603160f81b815250613353565b6000808260800151516001600160401b03811115612aaa57612aaa613ee4565b604051908082528060200260200182016040528015612ad3578160200160208202803683370190505b50905060005b836080015151811015612b3957612b0c84608001518281518110612aff57612aff614ac4565b6020026020010151613396565b828281518110612b1e57612b1e614ac4565b6020908102919091010152612b3281614b69565b9050612ad9565b507f3dcb471ba61bca9d3a21935bf6759f5945f7febe391420b6accadc1d1e882e0c83600001518460200151805190602001208560400151866060015185604051602001612b879190614dfc565b60408051601f19818403018152828252805160209182012090830197909752810194909452606084019290925260808301526001600160a01b031660a082015260c081019190915260e00160405160208183030381529060405280519060200120915050919050565b610fa3838383613409565b600082815260cc602052604090205461102257600091825260cc602052604090912055565b6000610880825490565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612c6457612c64614ac4565b602090810291909101015292915050565b612c87846001600160a01b03166126ea565b15610f765760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612cc09089908990889088908890600401614e32565b602060405180830381600087803b158015612cda57600080fd5b505af1925050508015612d0a575060408051601f3d908101601f19168201909252612d0791810190614ca7565b60015b612d16576123a9614cc4565b6001600160e01b0319811663f23a6e6160e01b14611ee25760405162461bcd60e51b815260040161085290614d69565b6001600160a01b038316331480612d625750612d628333611c37565b612d7e5760405162461bcd60e51b815260040161085290614c00565b610fa383838361358f565b60006108808261368a565b600083815260cd602052604090205415801590612dbe5750600083815260cc602052604090205415155b15612e4457600083815260cd6020526040812054612ddc9084614b51565b600085815260cc6020526040902054909150811115612e305760405162461bcd60e51b815260206004820152601060248201526f6d6f7265207468616e20737570706c7960801b6044820152606401610852565b600084815260cd6020526040902055612e56565b600083815260cd602052604090208290555b6001600160a01b038416612eb65760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610852565b33612ec781600087611dfa88612c2a565b600084815260c9602090815260408083206001600160a01b038916845290915281208054859290612ef9908490614b51565b90915550611fcd905081600087878787612c75565b61012f5460ff1615610f765760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b6064820152608401610852565b612f81828261150e565b61102257612f99816001600160a01b031660146136ca565b612fa48360206136ca565b604051602001612fb5929190614e77565b60408051601f198184030181529082905262461bcd60e51b82526108529160040161407a565b612fe5828261150e565b6110225760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561301d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611507836001600160a01b038416613865565b613080828261150e565b156110225760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611507836001600160a01b0384166138b4565b61012f5460ff166110a65760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610852565b6001600160a01b0383166131625760405162461bcd60e51b815260040161085290614ee6565b80518251146131835760405162461bcd60e51b815260040161085290614a37565b60003390506131a6818560008686604051806020016040528060008152506122fa565b60005b83518110156132795760008482815181106131c6576131c6614ac4565b6020026020010151905060008483815181106131e4576131e4614ac4565b602090810291909101810151600084815260c9835260408082206001600160a01b038c1683529093529190912054909150818110156132355760405162461bcd60e51b815260040161085290614f29565b61323f8282614b3a565b600093845260c9602090815260408086206001600160a01b038c1687529091529093209290925550613272905081614b69565b90506131a9565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516132ca929190614b84565b60405180910390a450505050565b61012f5460ff16156110a65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610852565b600082600001828154811061333657613336614ac4565b9060005260206000200154905092915050565b6110228282612484565b600054610100900460ff1661337a5760405162461bcd60e51b815260040161085290614db1565b81516020928301208151919092012061025b9190915561025c55565b80516020808301516040516000936133ec937fce8c43412600341b06881c0113c6a93eb2fdd51da73426cee150319daf4e1909939192019283526001600160a01b03919091166020830152604082015260600190565b604051602081830303815290604052805190602001209050919050565b6000613414836139a7565b9050600082516041141561342f5761342c82846139f5565b90505b846001600160a01b0316816001600160a01b031614611fcd5761345a856001600160a01b03166126ea565b1561354457604051630b135d3f60e11b808252906001600160a01b03871690631626ba7e9061348f9086908890600401614f6d565b60206040518083038186803b1580156134a757600080fd5b505afa1580156134bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134df9190614ca7565b6001600160e01b031916146040518060400160405280601c81526020017f7369676e617475726520766572696669636174696f6e206572726f72000000008152509061353e5760405162461bcd60e51b8152600401610852919061407a565b50611fcd565b604080518082018252601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020820152905162461bcd60e51b8152610852919060040161407a565b6001600160a01b0383166135b55760405162461bcd60e51b815260040161085290614ee6565b336135e4818560006135c687612c2a565b6135cf87612c2a565b604051806020016040528060008152506122fa565b600083815260c9602090815260408083206001600160a01b0388168452909152902054828110156136275760405162461bcd60e51b815260040161085290614f29565b6136318382614b3a565b600085815260c9602090815260408083206001600160a01b038a81168086529184528285209590955581518981529283018890529293861691600080516020615009833981519152910160405180910390a45050505050565b60006001600160e01b03198216636cdb3d1360e11b14806136bb57506001600160e01b031982166303a24d0760e21b145b80610880575061088082613a11565b606060006136d9836002614f86565b6136e4906002614b51565b6001600160401b038111156136fb576136fb613ee4565b6040519080825280601f01601f191660200182016040528015613725576020820181803683370190505b509050600360fc1b8160008151811061374057613740614ac4565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061376f5761376f614ac4565b60200101906001600160f81b031916908160001a9053506000613793846002614f86565b61379e906001614b51565b90505b6001811115613816576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106137d2576137d2614ac4565b1a60f81b8282815181106137e8576137e8614ac4565b60200101906001600160f81b031916908160001a90535060049490941c9361380f81614fa5565b90506137a1565b5083156115075760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610852565b60008181526001830160205260408120546138ac57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610880565b506000610880565b6000818152600183016020526040812054801561399d5760006138d8600183614b3a565b85549091506000906138ec90600190614b3a565b905081811461395157600086600001828154811061390c5761390c614ac4565b906000526020600020015490508087600001848154811061392f5761392f614ac4565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061396257613962614fbc565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610880565b6000915050610880565b60006108806139b4613a36565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000613a048585613ab3565b9150915061128681613af9565b60006001600160e01b03198216635a05180f60e01b1480610880575061088082613caf565b600061146e7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613a6661025b5490565b61025c546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b600080825160411415613aea5760208301516040840151606085015160001a613ade87828585613ce4565b94509450505050613af2565b506000905060025b9250929050565b6000816004811115613b0d57613b0d614fd2565b1415613b165750565b6001816004811115613b2a57613b2a614fd2565b1415613b735760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610852565b6002816004811115613b8757613b87614fd2565b1415613bd55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610852565b6003816004811115613be957613be9614fd2565b1415613c425760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610852565b6004816004811115613c5657613c56614fd2565b14156109055760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610852565b60006001600160e01b03198216637965db0b60e01b148061088057506301ffc9a760e01b6001600160e01b0319831614610880565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115613d115750600090506003613dbe565b8460ff16601b14158015613d2957508460ff16601c14155b15613d3a5750600090506004613dbe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613d8e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613db757600060019250925050613dbe565b9150600090505b94509492505050565b828054613dd3906148e5565b90600052602060002090601f016020900481019282613df55760008555613e3b565b82601f10613e0e57805160ff1916838001178555613e3b565b82800160010185558215613e3b579182015b82811115613e3b578251825591602001919060010190613e20565b50613e47929150613e4b565b5090565b5b80821115613e475760008155600101613e4c565b6001600160a01b038116811461090557600080fd5b8035613e8081613e60565b919050565b60008060408385031215613e9857600080fd5b8235613ea381613e60565b946020939093013593505050565b6001600160e01b03198116811461090557600080fd5b600060208284031215613ed957600080fd5b813561150781613eb1565b634e487b7160e01b600052604160045260246000fd5b604081018181106001600160401b0382111715613f1957613f19613ee4565b60405250565b601f8201601f191681016001600160401b0381118282101715613f4457613f44613ee4565b6040525050565b60405160c081016001600160401b0381118282101715613f6d57613f6d613ee4565b60405290565b600082601f830112613f8457600080fd5b81356001600160401b03811115613f9d57613f9d613ee4565b604051613fb4601f8301601f191660200182613f1f565b818152846020838601011115613fc957600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613ff857600080fd5b81356001600160401b0381111561400e57600080fd5b61401a84828501613f73565b949350505050565b60005b8381101561403d578181015183820152602001614025565b8381111561178d5750506000910152565b60008151808452614066816020860160208601614022565b601f01601f19169290920160200192915050565b602081526000611507602083018461404e565b60006001600160401b038211156140a6576140a6613ee4565b5060051b60200190565b600082601f8301126140c157600080fd5b813560206140ce8261408d565b604080516140dc8382613f1f565b84815260069490941b86018301938381019250878511156140fc57600080fd5b8387015b858110156141455782818a0312156141185760008081fd5b825161412381613efa565b813561412e81613e60565b815281860135868201528452928401928201614100565b50979650505050505050565b60008060008060008060c0878903121561416a57600080fd5b61417387613e75565b95506020870135945060408701356001600160401b038082111561419657600080fd5b6141a28a838b01613f73565b955060608901359150808211156141b857600080fd5b6141c48a838b016140b0565b945060808901359150808211156141da57600080fd5b6141e68a838b01613f73565b935060a08901359150808211156141fc57600080fd5b5061420989828a01613f73565b9150509295509295509295565b60006020828403121561422857600080fd5b5035919050565b600082601f83011261424057600080fd5b8135602061424d8261408d565b60405161425a8282613f1f565b83815260059390931b850182019282810191508684111561427a57600080fd5b8286015b84811015614295578035835291830191830161427e565b509695505050505050565b600080600080600060a086880312156142b857600080fd5b85356142c381613e60565b945060208601356142d381613e60565b935060408601356001600160401b03808211156142ef57600080fd5b6142fb89838a0161422f565b9450606088013591508082111561431157600080fd5b61431d89838a0161422f565b9350608088013591508082111561433357600080fd5b5061434088828901613f73565b9150509295509295909350565b6000806040838503121561436057600080fd5b82359150602083013561437281613e60565b809150509250929050565b600060c0828403121561438f57600080fd5b614397613f4b565b90508135815260208201356001600160401b03808211156143b757600080fd5b6143c385838601613f73565b6020840152604084013560408401526143de60608501613e75565b606084015260808401359150808211156143f757600080fd5b614403858386016140b0565b608084015260a084013591508082111561441c57600080fd5b5061442984828501613f73565b60a08301525092915050565b6000806000806080858703121561444b57600080fd5b84356001600160401b0381111561446157600080fd5b61446d8782880161437d565b945050602085013561447e81613e60565b9250604085013561448e81613e60565b9396929550929360600135925050565b600080604083850312156144b157600080fd5b82356001600160401b03808211156144c857600080fd5b818501915085601f8301126144dc57600080fd5b813560206144e98261408d565b6040516144f68282613f1f565b83815260059390931b850182019282810191508984111561451657600080fd5b948201945b8386101561453d57853561452e81613e60565b8252948201949082019061451b565b9650508601359250508082111561455357600080fd5b506145608582860161422f565b9150509250929050565b600081518084526020808501945080840160005b8381101561459a5781518752958201959082019060010161457e565b509495945050505050565b602081526000611507602083018461456a565b6000806000606084860312156145cd57600080fd5b83356145d881613e60565b925060208401356001600160401b03808211156145f457600080fd5b6146008783880161422f565b9350604086013591508082111561461657600080fd5b506146238682870161422f565b9150509250925092565b6000806040838503121561464057600080fd5b50508035926020909101359150565b6000806040838503121561466257600080fd5b823561466d81613e60565b91506020830135801515811461437257600080fd5b60008060006060848603121561469757600080fd5b83356001600160401b03808211156146ae57600080fd5b6146ba87838801613f73565b945060208601359150808211156146d057600080fd5b6146dc87838801613f73565b935060408601359150808211156146f257600080fd5b5061462386828701613f73565b60008060006060848603121561471457600080fd5b83356001600160401b0381111561472a57600080fd5b6147368682870161437d565b935050602084013561474781613e60565b929592945050506040919091013590565b602080825282518282018190526000919060409081850190868401855b828110156147a357815180516001600160a01b03168552860151868501529284019290850190600101614775565b5091979650505050505050565b600080604083850312156147c357600080fd5b82356147ce81613e60565b9150602083013561437281613e60565b6020808252825182820181905260009190848201906040850190845b8181101561481f5783516001600160a01b0316835292840192918401916001016147fa565b50909695505050505050565b600080600080600060a0868803121561484357600080fd5b853561484e81613e60565b9450602086013561485e81613e60565b9350604086013592506060860135915060808601356001600160401b0381111561488757600080fd5b61434088828901613f73565b6000602082840312156148a557600080fd5b813561150781613e60565b6000806000606084860312156148c557600080fd5b83356148d081613e60565b95602085013595506040909401359392505050565b600181811c908216806148f957607f821691505b6020821081141561491a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251614932818460208701614022565b9190910192915050565b602080825260179082015276746f6b656e5552492063616e277420626520656d70747960481b604082015260600190565b604081526000614980604083018561404e565b90508260208301529392505050565b600060208083526000845481600182811c9150808316806149b157607f831692505b8583108114156149cf57634e487b7160e01b85526022600452602485fd5b8786018381526020018180156149ec57600181146149fd57614a28565b60ff19861682528782019650614a28565b60008b81526020902060005b86811015614a2257815484820152908501908901614a09565b83019750505b50949998505050505050505050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015614b4c57614b4c614b24565b500390565b60008219821115614b6457614b64614b24565b500190565b6000600019821415614b7d57614b7d614b24565b5060010190565b604081526000614b97604083018561456a565b8281036020840152614ba9818561456a565b95945050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090614c759083018661456a565b8281036060840152614c87818661456a565b90508281036080840152614c9b818561404e565b98975050505050505050565b600060208284031215614cb957600080fd5b815161150781613eb1565b600060033d1115614cdd5760046000803e5060005160e01c5b90565b600060443d1015614cee5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715614d1d57505050505090565b8285019150815181811115614d355750505050505090565b843d8701016020828501011115614d4f5750505050505090565b614d5e60208286010187613f1f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b815160009082906020808601845b83811015614e2657815185529382019390820190600101614e0a565b50929695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614e6c9083018461404e565b979650505050505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351614ea9816017850160208801614022565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614eda816028840160208801614022565b01602801949350505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b82815260406020820152600061401a604083018461404e565b6000816000190483118215151615614fa057614fa0614b24565b500290565b600081614fb457614fb4614b24565b506000190190565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fdfe455243313135355072657365744d696e7465725061757365723a206d75737420c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f627f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa264697066735822122000d87c8dbf1a567a1710cdd4e639bc01851bce317117421bea6251444ae2ae7b64736f6c63430008090033",
  "devdoc": {
    "events": {
      "BurnLazy(address,address,uint256,uint256)": {
        "params": {
          "account": "address used to burn",
          "amount": "amount of token burned",
          "id": "token id of token burned",
          "operator": "operator used to burn"
        }
      },
      "BurnLazyBatch(address,address,uint256[],uint256[])": {
        "params": {
          "account": "address used to burn",
          "amounts": "amounts of tokens burned",
          "ids": "token ids of tokens burned",
          "operator": "operator used to burn"
        }
      },
      "LockedContentViewed(address,uint256,string)": {
        "params": {
          "lockedContent": "locked content queried",
          "msgSender": "user that triggered it",
          "tokenId": "token id queried"
        }
      },
      "Minted(address,uint256,string,uint256)": {
        "params": {
          "amount": "amount of token minted",
          "toAddress": "recipient of the mint",
          "tokenId": "token id of the mint",
          "tokenURI": "token uri of the token minted"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "params": {
          "account": "account used to burn",
          "amount": "amount of tokens to burn",
          "id": "token to burn"
        }
      },
      "burnBatch(address,uint256[],uint256[])": {
        "params": {
          "account": "account used to burn",
          "amounts": "amounts of tokens to burn",
          "ids": "tokens to burn"
        }
      },
      "getCurrentCounter()": {
        "returns": {
          "_0": "current token conter"
        }
      },
      "getCurrentLockedContentViewTracker(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "locked content view count"
        }
      },
      "getLockedContent(uint256)": {
        "params": {
          "tokenId": "token to query"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoyalties(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token royalties details"
        }
      },
      "getRoyaltiesBps(uint256)": {
        "details": "fee basis points 10000 = 100%",
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token royalties bps details"
        }
      },
      "getRoyaltiesRecipients(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token royalties recipients details"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,string,string)": {
        "params": {
          "_name": "contract name",
          "_symbol": "contract symbol",
          "uri": "contract uri"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mintAndTransfer((uint256,string,uint256,address,(address,uint256)[],bytes),address,uint256)": {
        "params": {
          "_amount": "amount of token(s)",
          "lazyMintData": "lazyMintData for token(s)",
          "to": "recipient for token(s)"
        }
      },
      "mintGhost(address,uint256,bytes,(address,uint256)[],string,string)": {
        "params": {
          "amount": "royalties for token(s)",
          "data": "royalties for token(s)",
          "lockedcontent": "lockedcontent for token(s)",
          "royalties": "royalties for token(s)",
          "to": "recipient for token(s)",
          "tokenURI": "tokenURI for token(s)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.",
        "params": {
          "interfaceId": "interface id to query"
        },
        "returns": {
          "_0": "status interface id support status"
        }
      },
      "transferFromOrMint((uint256,string,uint256,address,(address,uint256)[],bytes),address,address,uint256)": {
        "params": {
          "amount": "amount of token",
          "data": "lazyMintData for token",
          "from": "source for token",
          "to": "recipient for token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BurnLazy(address,address,uint256,uint256)": {
        "notice": "This event is emitted when a lazy minted token is burned"
      },
      "BurnLazyBatch(address,address,uint256[],uint256[])": {
        "notice": "This event is emitted when multiple lazy minted tokens are burned"
      },
      "LockedContentViewed(address,uint256,string)": {
        "notice": "This event is emitted when a token locked content is viewed"
      },
      "Minted(address,uint256,string,uint256)": {
        "notice": "This event is emitted when a token is minted"
      }
    },
    "kind": "user",
    "methods": {
      "_GHOSTMARKET_NFT_ROYALTIES()": {
        "notice": "bytes4(keccak256(_GHOSTMARKET_NFT_ROYALTIES)) == 0xe42093a6"
      },
      "burn(address,uint256,uint256)": {
        "notice": "Burn token"
      },
      "burnBatch(address,uint256[],uint256[])": {
        "notice": "Bulk burn tokens"
      },
      "getCurrentCounter()": {
        "notice": "Return current token counter"
      },
      "getCurrentLockedContentViewTracker(uint256)": {
        "notice": "Return locked content view count for a token"
      },
      "getLockedContent(uint256)": {
        "notice": "Trigger locked content event for a token"
      },
      "getRoyalties(uint256)": {
        "notice": "Return royalties for a token"
      },
      "getRoyaltiesBps(uint256)": {
        "notice": "Return royalties bps for a token"
      },
      "getRoyaltiesRecipients(uint256)": {
        "notice": "Return royalties recipients for a token"
      },
      "initialize(string,string,string)": {
        "notice": "Initialize the contract"
      },
      "mintAndTransfer((uint256,string,uint256,address,(address,uint256)[],bytes),address,uint256)": {
        "notice": "Lazy mint token"
      },
      "mintGhost(address,uint256,bytes,(address,uint256)[],string,string)": {
        "notice": "Mint token(s)"
      },
      "name()": {
        "notice": "contract name"
      },
      "supportsInterface(bytes4)": {
        "notice": "Return interface support for an interface id"
      },
      "symbol()": {
        "notice": "contract symbol"
      },
      "transferFromOrMint((uint256,string,uint256,address,(address,uint256)[],bytes),address,address,uint256)": {
        "notice": "Transfer (if exists) or mint (if non existing) token(s)"
      }
    },
    "notice": "GhostMarket ERC1155 contract with minting, burning, pause, royalties & lock content functions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 721,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 724,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2448,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3401,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 483,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3726_storage)"
      },
      {
        "astId": 143,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6137,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6143,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6145,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_uri",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 6149,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "supply",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6153,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "minted",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7310,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 10640,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 886,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_paused",
        "offset": 0,
        "slot": "303",
        "type": "t_bool"
      },
      {
        "astId": 991,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10719,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "353",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6107,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "403",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1006,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_status",
        "offset": 0,
        "slot": "453",
        "type": "t_uint256"
      },
      {
        "astId": 1050,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "454",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 593,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_owner",
        "offset": 0,
        "slot": "503",
        "type": "t_address"
      },
      {
        "astId": 713,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "504",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3313,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "553",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 3357,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "554",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3146,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "603",
        "type": "t_bytes32"
      },
      {
        "astId": 3148,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "604",
        "type": "t_bytes32"
      },
      {
        "astId": 3286,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "605",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7417,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "655",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10507,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "705",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8735,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "name",
        "offset": 0,
        "slot": "755",
        "type": "t_string_storage"
      },
      {
        "astId": 8738,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "symbol",
        "offset": 0,
        "slot": "756",
        "type": "t_string_storage"
      },
      {
        "astId": 8750,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_royalties",
        "offset": 0,
        "slot": "757",
        "type": "t_mapping(t_uint256,t_array(t_struct(Part)12141_storage)dyn_storage)"
      },
      {
        "astId": 8755,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_lockedContent",
        "offset": 0,
        "slot": "758",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8760,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_lockedContentViewTracker",
        "offset": 0,
        "slot": "759",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8764,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_metadataJson",
        "offset": 0,
        "slot": "760",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8810,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_payedMintFeesBalance",
        "offset": 0,
        "slot": "761",
        "type": "t_uint256"
      },
      {
        "astId": 8812,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_ghostmarketMintFees",
        "offset": 0,
        "slot": "762",
        "type": "t_uint256"
      },
      {
        "astId": 8900,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "763",
        "type": "t_struct(Counter)2455_storage"
      },
      {
        "astId": 9741,
        "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "764",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Part)12141_storage)dyn_storage": {
        "base": "t_struct(Part)12141_storage",
        "encoding": "dynamic_array",
        "label": "struct LibPart.Part[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3726_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3726_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_struct(Part)12141_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibPart.Part[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Part)12141_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3726_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 3725,
            "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3425_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2455_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2454,
            "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Part)12141_storage": {
        "encoding": "inplace",
        "label": "struct LibPart.Part",
        "members": [
          {
            "astId": 12138,
            "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 12140,
            "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3425_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 3420,
            "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3424,
            "contract": "src/mint/GhostMarketERC1155.sol:GhostMarketERC1155",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}